# Attributive

Attributive can restrict the users who can execute the current Interaction, and can also be used to restrict Payload.

## Creating Attributive
Do not use external variables in Attributive; it should remain a pure function. Otherwise, it will fail during serialization and deserialization.

An Attributive declaration for "mine" is as follows:

```typescript
const Mine = Attributive.create({
    name: 'Mine',
    content:  function(this: Controller, request, { user }){
      return request.owner === user.id
    }
})
```


## Creating Generic Attributive
You can define some fixed attributives in the business, such as "mine" in the above example: it checks whether the entity's owner field points to the current interaction request's user. Then, if there is an owner field and it is indeed of UserEntity type, this attributive can be used. Of course, if you don't want to fix the name to owner but still want to use a general attributive, we can dynamically judge by injecting field information and the corresponding entity into the attributive through controller.globals.

### Using BoolExp to Connect Attributive

When the conditions of the attributive are complex, we can use BoolExp to connect multiple attributives to form a logical combination, and then convert them into attributives using boolExpToAttributives

```typescript
const MyPending = boolExpToAttributives(
    BoolExp.atom(Mine).and(
        Attributive.create({
            name: 'Pending',
            content: async function(this: Controller, request, { user }){
             return request.result === 'pending'
            }
        })
    )
)
```