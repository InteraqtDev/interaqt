import { describe, test, expect, beforeEach } from 'vitest'
import { 
  Entity, Property, Relation, Interaction, Action, Payload, PayloadItem,
  Transform, StateMachine, StateNode, StateTransfer, Count, MatchExp,
  InteractionEventEntity, Controller, MonoSystem, PGLiteDB,
  Condition, Conditions, BoolExp
} from 'interaqt'
import { entities, relations, interactions, activities, dicts } from '../backend'

describe('Basic Functionality', () => {
  let system: MonoSystem
  let controller: Controller
  
  beforeEach(async () => {
    // Create fresh system and controller for each test
    system = new MonoSystem(new PGLiteDB())
    
    controller = new Controller({
      system,
      entities,
      relations,
      interactions,
      activities,
      dict: dicts,
      ignorePermission: true,
      forceThtrowInteractionError: true // 使用 throw 的方式来处理 interaction 的 error
    })

    await controller.setup(true)
  })

  test('ScoreEvent.id is auto-generated when ScoreEvent is created (_owner)', async () => {
    /**
     * Test Plan for: ScoreEvent.id (_owner)
     * Dependencies: User entity, ScoreEvent entity, ApplyScoreDeduction interaction
     * Steps: 1) Create user 2) Apply score deduction 3) Verify ScoreEvent has auto-generated id
     * Business Logic: ScoreEvent id is automatically generated by system when entity is created
     */

    // First create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123',
        fullName: 'Test User',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'testuser'] }),
      undefined,
      ['id', 'username']
    )
    const userId = users[0].id

    // Apply score deduction to create a ScoreEvent
    const scoreResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        deductionAmount: 10,
        reason: 'Late night noise',
        category: 'Discipline'
      }
    })

    expect(scoreResult.error).toBeUndefined()

    // Verify ScoreEvent was created with auto-generated id
    const scoreEvents = await system.storage.find('ScoreEvent',
      MatchExp.atom({ key: 'reason', value: ['=', 'Late night noise'] }),
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents.length).toBe(1)
    const scoreEvent = scoreEvents[0]
    
    // Verify id is auto-generated (should be a string and not empty)
    expect(scoreEvent.id).toBeDefined()
    expect(typeof scoreEvent.id).toBe('string')
    expect(scoreEvent.id.length).toBeGreaterThan(0)
    
    // Verify other properties are set correctly
    expect(scoreEvent.amount).toBe(-10) // Negative for deduction
    expect(scoreEvent.reason).toBe('Late night noise')
    expect(scoreEvent.category).toBe('Discipline')
    expect(scoreEvent.timestamp).toBeDefined()
    expect(typeof scoreEvent.timestamp).toBe('number')
  })

  test('ScoreEvent.reason set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: ScoreEvent.reason (_owner)
     * This tests that reason is properly set when ScoreEvent is created
     * Dependencies: User entity, ScoreEvent entity, ApplyScoreDeduction interaction
     * Steps: 1) Create user 2) Apply score deduction with specific reason 3) Verify reason is set correctly
     * Business Logic: ScoreEvent's creation computation sets reason from interaction payload
     */

    // First create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'reasontestuser',
        email: 'reasontest@example.com',
        password: 'password123',
        fullName: 'Reason Test User',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'reasontestuser'] }),
      undefined,
      ['id', 'username']
    )
    const userId = users[0].id

    // Apply score deduction with a specific reason
    const deductionResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        deductionAmount: 15,
        reason: 'Unauthorized guest access',
        category: 'Security'
      }
    })

    expect(deductionResult.error).toBeUndefined()

    // Find the created ScoreEvent
    const scoreEvents = await system.storage.find('ScoreEvent',
      MatchExp.atom({ key: 'reason', value: ['=', 'Unauthorized guest access'] }),
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents.length).toBe(1)
    const scoreEvent = scoreEvents[0]

    // Verify the reason is set correctly by the owner computation
    expect(scoreEvent.reason).toBe('Unauthorized guest access')
    expect(scoreEvent.category).toBe('Security')
    expect(scoreEvent.amount).toBe(-15) // Negative for deduction
    expect(scoreEvent.timestamp).toBeDefined()
    expect(typeof scoreEvent.timestamp).toBe('number')
  })

  test('ScoreEvent.category set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: ScoreEvent.category (_owner)
     * This tests that category is properly set when ScoreEvent is created
     * Dependencies: User entity, ScoreEvent entity, ApplyScoreDeduction interaction
     * Steps: 1) Create user 2) Apply score deduction with specific category 3) Verify category is set correctly
     * Business Logic: ScoreEvent's creation computation sets category from interaction payload
     */

    // First create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'categorytestuser',
        email: 'categorytest@example.com',
        password: 'password123',
        fullName: 'Category Test User',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'categorytestuser'] }),
      undefined,
      ['id', 'username']
    )
    const userId = users[0].id

    // Apply score deduction with a specific category
    const deductionResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        deductionAmount: 25,
        reason: 'Property damage',
        category: 'Violation'
      }
    })

    expect(deductionResult.error).toBeUndefined()

    // Find the created ScoreEvent
    const scoreEvents = await system.storage.find('ScoreEvent',
      MatchExp.atom({ key: 'category', value: ['=', 'Violation'] }),
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents.length).toBe(1)
    const scoreEvent = scoreEvents[0]

    // Verify the category is set correctly by the owner computation
    expect(scoreEvent.category).toBe('Violation')
    expect(scoreEvent.reason).toBe('Property damage')
    expect(scoreEvent.amount).toBe(-25) // Negative for deduction
    expect(scoreEvent.timestamp).toBeDefined()
    expect(typeof scoreEvent.timestamp).toBe('number')
  })

  test('ScoreEvent.timestamp set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: ScoreEvent.timestamp (_owner)
     * This tests that timestamp is properly set when ScoreEvent is created
     * Dependencies: User entity, ScoreEvent entity, ApplyScoreDeduction interaction
     * Steps: 1) Create user 2) Apply score deduction 3) Verify timestamp is set to current time
     * Business Logic: ScoreEvent's creation computation sets timestamp to current time at creation
     */

    // Record time before creating the ScoreEvent
    const beforeTime = Math.floor(Date.now() / 1000)

    // First create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'timestamptestuser',
        email: 'timestamptest@example.com',
        password: 'password123',
        fullName: 'Timestamp Test User',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'timestamptestuser'] }),
      undefined,
      ['id', 'username']
    )
    const userId = users[0].id

    // Apply score deduction
    const deductionResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        deductionAmount: 5,
        reason: 'Late return',
        category: 'Rules'
      }
    })

    expect(deductionResult.error).toBeUndefined()

    // Record time after creating the ScoreEvent
    const afterTime = Math.floor(Date.now() / 1000)

    // Find the created ScoreEvent
    const scoreEvents = await system.storage.find('ScoreEvent',
      MatchExp.atom({ key: 'reason', value: ['=', 'Late return'] }),
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents.length).toBe(1)
    const scoreEvent = scoreEvents[0]

    // Verify the timestamp is set correctly by the owner computation
    expect(scoreEvent.timestamp).toBeDefined()
    expect(typeof scoreEvent.timestamp).toBe('number')
    expect(scoreEvent.timestamp).toBeGreaterThanOrEqual(beforeTime)
    expect(scoreEvent.timestamp).toBeLessThanOrEqual(afterTime)
    
    // Verify other properties are correct
    expect(scoreEvent.reason).toBe('Late return')
    expect(scoreEvent.category).toBe('Rules')
    expect(scoreEvent.amount).toBe(-5) // Negative for deduction
  })

  test('RemovalRequest.id is auto-generated when RemovalRequest is created (_owner)', async () => {
    /**
     * Test Plan for: RemovalRequest.id (_owner)
     * Dependencies: User entity, RemovalRequest entity, CreateRemovalRequest interaction
     * Steps: 1) Create user 2) Create removal request 3) Verify RemovalRequest has auto-generated id
     * Business Logic: RemovalRequest id is automatically generated by framework when entity is created
     */

    // First create a user (needed as target for removal request)
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'removalrequesttarget',
        email: 'removalrequesttarget@example.com',
        password: 'password123',
        fullName: 'Removal Request Target',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID (this will be the target of removal request)
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'removalrequesttarget'] }),
      undefined,
      ['id', 'username']
    )
    const targetUserId = users[0].id

    // Create removal request
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: 'admin' }, // Requester
      payload: {
        targetUserId: targetUserId,
        reason: 'Repeated rule violations',
        urgency: 'high'
      }
    })

    expect(requestResult.error).toBeUndefined()

    // Find the created RemovalRequest
    const requests = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Repeated rule violations'] }),
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(requests.length).toBe(1)
    const removalRequest = requests[0]

    // Verify id is auto-generated (should be a string and not empty)
    expect(removalRequest.id).toBeDefined()
    expect(typeof removalRequest.id).toBe('string')
    expect(removalRequest.id.length).toBeGreaterThan(0)
    
    // Verify other properties are set correctly
    expect(removalRequest.reason).toBe('Repeated rule violations')
    expect(removalRequest.urgency).toBe('high')
    expect(removalRequest.status).toBe('pending') // Default status
    expect(removalRequest.createdAt).toBeDefined()
    expect(typeof removalRequest.createdAt).toBe('number')
  })

  test('User entity creation via CreateUser interaction', async () => {
    // Execute CreateUser interaction
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, // user context
      payload: {
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123',
        fullName: 'Test User',
        role: 'student'
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created user with specific attributes
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username', 'email', 'fullName', 'role', 'isActive', 'createdAt', 'currentScore']
      }
    })

    expect(users.data).toHaveLength(1)
    
    const user = users.data[0]
    expect(user.username).toBe('testuser')
    expect(user.email).toBe('test@example.com')
    expect(user.fullName).toBe('Test User')
    expect(user.role).toBe('student')
    expect(user.isActive).toBe(true)
    expect(user.createdAt).toBeGreaterThan(0)
    expect(user.currentScore).toBe(100) // Default value
  })

  test('User.isActive StateMachine computation sets active status correctly', async () => {
    /**
     * Test Plan for: User.isActive
     * Dependencies: User entity, CreateUser interaction  
     * Steps: 1) Create user 2) Verify isActive is set to true by StateMachine
     * Business Logic: StateMachine handles soft delete status - users are active when created
     */
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'activeuser',
        email: 'active@test.com',
        password: 'testpass',
        fullName: 'Active User',
        role: 'student'
      }
    })

    expect(result.error).toBeUndefined()
    
    const user = await system.storage.findOne(
      'User',
      MatchExp.atom({ key: 'username', value: ['=', 'activeuser'] }),
      undefined,
      ['id', 'isActive']
    )

    expect(user.isActive).toBe(true)
  })

  test('Dormitory entity creation via CreateDormitory interaction', async () => {
    /**
     * Test Plan for: Dormitory entity Transform computation
     * Dependencies: Dormitory entity, CreateDormitory interaction
     * Steps: 1) Execute CreateDormitory interaction 2) Verify dormitory is created with correct properties
     * Business Logic: Transform computation creates Dormitory from CreateDormitory interaction
     */
    
    // Execute CreateDormitory interaction
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' }, // user context
      payload: {
        name: 'Building A Room 101',
        bedCount: 4,
        building: 'A',
        floor: 1
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory with specific attributes
    const dormitories = await controller.callInteraction('ViewDormitoryList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'name', 'bedCount', 'building', 'floor', 'occupiedBeds', 'availableBeds']
      }
    })

    expect(dormitories.data).toHaveLength(1)
    
    const dormitory = dormitories.data[0]
    expect(dormitory.name).toBe('Building A Room 101')
    expect(dormitory.bedCount).toBe(4)
    expect(dormitory.building).toBe('A')
    expect(dormitory.floor).toBe(1)
    expect(dormitory.occupiedBeds).toBe(0) // Default value
    expect(dormitory.id).toBeDefined()
  })

  test('ScoreEvent entity creation via ApplyScoreDeduction interaction', async () => {
    /**
     * Test Plan for: ScoreEvent entity Transform computation
     * Dependencies: ScoreEvent entity, User entity, ApplyScoreDeduction interaction
     * Steps: 1) Create a user 2) Execute ApplyScoreDeduction interaction 3) Verify ScoreEvent is created with correct properties
     * Business Logic: Transform computation creates ScoreEvent from ApplyScoreDeduction interaction with negative amount for deductions
     */
    
    // First create a user to apply deduction to
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123',
        fullName: 'Test User',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const userId = users.data[0].id
    
    // Execute ApplyScoreDeduction interaction
    const deductionResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' }, 
      payload: {
        userId: userId,
        deductionAmount: 15,
        reason: 'Late night noise violation',
        category: 'behavior'
      }
    })

    // Verify the interaction was successful
    expect(deductionResult).toBeDefined()
    expect(deductionResult.error).toBeUndefined()
    
    // Query created ScoreEvent
    const scoreEvents = await system.storage.find('ScoreEvent', 
      undefined,
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents).toHaveLength(1)
    
    const scoreEvent = scoreEvents[0]
    expect(scoreEvent.amount).toBe(-15) // Negative for deduction
    expect(scoreEvent.reason).toBe('Late night noise violation')
    expect(scoreEvent.category).toBe('behavior')
    expect(scoreEvent.timestamp).toBeGreaterThan(0)
    expect(scoreEvent.id).toBeDefined()
  })

  test('RemovalRequest entity creation via CreateRemovalRequest interaction', async () => {
    /**
     * Test Plan for: RemovalRequest entity Transform computation
     * Dependencies: RemovalRequest entity, User entity, CreateRemovalRequest interaction
     * Steps: 1) Create a user 2) Execute CreateRemovalRequest interaction 3) Verify RemovalRequest is created with correct properties
     * Business Logic: Transform computation creates RemovalRequest from CreateRemovalRequest interaction with pending status
     */
    
    // First create a user to target for removal
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'targetuser',
        email: 'target@example.com',
        password: 'password123',
        fullName: 'Target User',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const targetUserId = users.data[0].id
    
    // Execute CreateRemovalRequest interaction
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: 'admin' }, 
      payload: {
        targetUserId: targetUserId,
        reason: 'Repeated noise violations after warnings',
        urgency: 'high'
      }
    })

    // Verify the interaction was successful
    expect(requestResult).toBeDefined()
    expect(requestResult.error).toBeUndefined()
    
    // Query created RemovalRequest
    const removalRequests = await system.storage.find('RemovalRequest', 
      undefined,
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(removalRequests).toHaveLength(1)
    
    const removalRequest = removalRequests[0]
    expect(removalRequest.reason).toBe('Repeated noise violations after warnings')
    expect(removalRequest.urgency).toBe('high')
    expect(removalRequest.status).toBe('pending')
    expect(removalRequest.createdAt).toBeGreaterThan(0)
    expect(removalRequest.id).toBeDefined()
  })

  test('BedAssignmentRelation StateMachine computation', async () => {
    /**
     * Test Plan for: BedAssignmentRelation StateMachine computation
     * Dependencies: BedAssignmentRelation, User, Dormitory, AssignUserToBed, RemoveUserFromDormitory interactions
     * Steps: 1) Create user and dormitory 2) Execute AssignUserToBed interaction 3) Verify relation is created 4) Execute RemoveUserFromDormitory 5) Verify relation is removed
     * Business Logic: StateMachine creates relation when user is active and dormitory has capacity, removes it when requested
     */
    
    // Create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'student1',
        email: 'student1@example.com',
        password: 'password123',
        fullName: 'Student One',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    // Create a dormitory
    const dormitoryResult = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' }, 
      payload: {
        name: 'Building A Room 101',
        bedCount: 4,
        building: 'A',
        floor: 1
      }
    })
    
    expect(dormitoryResult.error).toBeUndefined()
    
    // Get the created user and dormitory IDs
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username', 'isActive']
      }
    })
    
    const dormitories = await controller.callInteraction('ViewDormitoryList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'name', 'bedCount', 'occupiedBeds']
      }
    })
    
    const userId = users.data[0].id
    const dormitoryId = dormitories.data[0].id
    
    // Execute AssignUserToBed interaction to create relation
    const assignResult = await controller.callInteraction('AssignUserToBed', {
      user: { id: 'admin' }, 
      payload: {
        userId: userId,
        dormitoryId: dormitoryId,
        bedNumber: 1
      }
    })

    // Verify the interaction was successful
    expect(assignResult).toBeDefined()
    expect(assignResult.error).toBeUndefined()
    
    // Query created BedAssignmentRelation using the relation instance name
    const { BedAssignmentRelation } = await import('../backend')
    const bedAssignments = await system.storage.find(BedAssignmentRelation.name, 
      MatchExp.atom({ key: 'source.id', value: ['=', userId] }),
      undefined,
      [
        'id',
        'bedNumber', 
        'assignedAt',
        ['source', { attributeQuery: ['id', 'username'] }],
        ['target', { attributeQuery: ['id', 'name'] }]
      ]
    )

    expect(bedAssignments).toHaveLength(1)
    
    const bedAssignment = bedAssignments[0]
    expect(bedAssignment.bedNumber).toBe(1)
    expect(bedAssignment.assignedAt).toBeGreaterThan(0)
    expect(bedAssignment.source.id).toBe(userId)
    expect(bedAssignment.target.id).toBe(dormitoryId)
    expect(bedAssignment.id).toBeDefined()

    // Now test removal - Execute RemoveUserFromDormitory interaction
    const removeResult = await controller.callInteraction('RemoveUserFromDormitory', {
      user: { id: 'admin' }, 
      payload: {
        userId: userId
      }
    })

    // Verify the removal interaction was successful
    expect(removeResult).toBeDefined()
    expect(removeResult.error).toBeUndefined()
    
    // Query to verify relation is removed
    const removedAssignments = await system.storage.find(BedAssignmentRelation.name, 
      MatchExp.atom({ key: 'source.id', value: ['=', userId] }),
      undefined,
      ['id']
    )

    expect(removedAssignments).toHaveLength(0)
  })

  test('AuditLog entity creation via system interactions (_parent:Interaction)', async () => {
    /**
     * Test Plan for: AuditLog entity Transform computation
     * Dependencies: AuditLog entity, User entity, Dormitory entity, various interactions
     * Steps: 1) Execute CreateUser interaction 2) Execute CreateDormitory interaction 3) Verify AuditLog entries are created for each interaction
     * Business Logic: AuditLog entity's Transform computation monitors InteractionEventEntity and creates audit records for significant interactions
     */
    
    // Execute CreateUser interaction
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'audituser',
        email: 'audit@example.com',
        password: 'password123',
        fullName: 'Audit User',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    // Execute CreateDormitory interaction
    const dormitoryResult = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' }, 
      payload: {
        name: 'Building B Room 202',
        bedCount: 6,
        building: 'B',
        floor: 2
      }
    })
    
    expect(dormitoryResult.error).toBeUndefined()
    
    // Query created AuditLog entries
    const auditLogs = await system.storage.find('AuditLog', 
      undefined,
      { orderBy: { timestamp: 'asc' } },
      ['id', 'actionType', 'timestamp', 'details']
    )

    // Should have audit logs for both CreateUser and CreateDormitory interactions
    expect(auditLogs.length).toBeGreaterThanOrEqual(2)
    
    // Find the CreateUser audit log
    const createUserAudit = auditLogs.find(log => log.actionType === 'CreateUser')
    expect(createUserAudit).toBeDefined()
    expect(createUserAudit.actionType).toBe('CreateUser')
    expect(createUserAudit.timestamp).toBeGreaterThan(0)
    expect(createUserAudit.details).toBeDefined()
    
    // Parse and verify audit details for CreateUser
    const createUserDetails = JSON.parse(createUserAudit.details)
    expect(createUserDetails.userId).toBe('admin')
    expect(createUserDetails.interaction).toBe('CreateUser')
    expect(createUserDetails.payload.username).toBe('audituser')
    expect(createUserDetails.payload.email).toBe('audit@example.com')
    
    // Find the CreateDormitory audit log
    const createDormitoryAudit = auditLogs.find(log => log.actionType === 'CreateDormitory')
    expect(createDormitoryAudit).toBeDefined()
    expect(createDormitoryAudit.actionType).toBe('CreateDormitory')
    expect(createDormitoryAudit.timestamp).toBeGreaterThan(0)
    expect(createDormitoryAudit.details).toBeDefined()
    
    // Parse and verify audit details for CreateDormitory
    const createDormitoryDetails = JSON.parse(createDormitoryAudit.details)
    expect(createDormitoryDetails.userId).toBe('admin')
    expect(createDormitoryDetails.interaction).toBe('CreateDormitory')
    expect(createDormitoryDetails.payload.name).toBe('Building B Room 202')
    expect(createDormitoryDetails.payload.bedCount).toBe(6)
  })

  test('AuditTrackingRelation creation with AuditLog (_parent:AuditLog)', async () => {
    /**
     * Test Plan for: AuditTrackingRelation Transform computation (_parent:AuditLog)
     * Dependencies: AuditTrackingRelation, User entity, AuditLog entity, multiple interactions
     * Steps: 1) Create admin user 2) Execute multiple auditable interactions 3) Verify AuditTrackingRelations are created for each 4) Test with non-UUID user context (should skip relation creation)
     * Business Logic: When AuditLog is created through parent AuditLog computation, relations are created between the acting user and audit logs (only for real User entities with UUID format)
     */
    
    // First create an admin user that will perform actions
    const adminResult = await controller.callInteraction('CreateUser', {
      user: { id: 'system' }, 
      payload: {
        username: 'adminuser',
        email: 'admin@example.com',
        password: 'password123',
        fullName: 'Admin User',
        role: 'admin'
      }
    })
    
    expect(adminResult.error).toBeUndefined()
    
    // Get the created admin user ID
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'system' },
      query: {
        attributeQuery: ['id', 'username', 'role']
      }
    })
    
    const adminUser = (users.data as any[]).find(u => u.username === 'adminuser')
    expect(adminUser).toBeDefined()
    
    // Test 1: CreateUser interaction with real UUID user context
    const targetResult = await controller.callInteraction('CreateUser', {
      user: { id: adminUser.id }, // Use actual user UUID
      payload: {
        username: 'targetuser',
        email: 'target@example.com',
        password: 'password123',
        fullName: 'Target User',
        role: 'student'
      }
    })
    
    expect(targetResult.error).toBeUndefined()
    
    // Test 2: CreateDormitory interaction
    const dormitoryResult = await controller.callInteraction('CreateDormitory', {
      user: { id: adminUser.id },
      payload: {
        name: 'Building D Room 401',
        bedCount: 6,
        building: 'D',
        floor: 4
      }
    })
    
    expect(dormitoryResult.error).toBeUndefined()
    
    // Get created entities for further testing
    const targetUsers = await controller.callInteraction('ViewUserList', {
      user: { id: 'system' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const dormitories = await controller.callInteraction('ViewDormitoryList', {
      user: { id: 'system' },
      query: {
        attributeQuery: ['id', 'name']
      }
    })
    
    const targetUser = (targetUsers.data as any[]).find(u => u.username === 'targetuser')
    const dormitory = dormitories.data[0]
    
    // Test 3: ApplyScoreDeduction interaction
    const scoreResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: adminUser.id },
      payload: {
        userId: targetUser.id,
        deductionAmount: 25,
        reason: 'Testing audit trail',
        category: 'test'
      }
    })
    
    expect(scoreResult.error).toBeUndefined()
    
    // Test 4: AssignUserToBed interaction
    const assignResult = await controller.callInteraction('AssignUserToBed', {
      user: { id: adminUser.id },
      payload: {
        userId: targetUser.id,
        dormitoryId: dormitory.id,
        bedNumber: 1
      }
    })
    
    expect(assignResult.error).toBeUndefined()
    
    // Query AuditTrackingRelation using the relation instance name
    const { AuditTrackingRelation } = await import('../backend')
    const auditRelations = await system.storage.find(AuditTrackingRelation.name, 
      MatchExp.atom({ key: 'source.id', value: ['=', adminUser.id] }),
      undefined,
      [
        'id',
        'timestamp',
        ['source', { attributeQuery: ['id', 'username'] }],
        ['target', { attributeQuery: ['id', 'actionType', 'details'] }]
      ]
    )

    // Should have multiple audit tracking relations for the admin user
    expect(auditRelations.length).toBeGreaterThanOrEqual(4)
    
    // Verify CreateUser audit relation
    const createUserRelation = auditRelations.find(rel => 
      rel.target.actionType === 'CreateUser'
    )
    
    expect(createUserRelation).toBeDefined()
    expect(createUserRelation.source.id).toBe(adminUser.id)
    expect(createUserRelation.source.username).toBe('adminuser')
    expect(createUserRelation.target.actionType).toBe('CreateUser')
    expect(createUserRelation.timestamp).toBeGreaterThan(0)
    
    const createUserDetails = JSON.parse(createUserRelation.target.details)
    expect(createUserDetails.userId).toBe(adminUser.id)
    expect(createUserDetails.interaction).toBe('CreateUser')
    expect(createUserDetails.payload.username).toBe('targetuser')
    
    // Verify CreateDormitory audit relation
    const createDormitoryRelation = auditRelations.find(rel => 
      rel.target.actionType === 'CreateDormitory'
    )
    
    expect(createDormitoryRelation).toBeDefined()
    expect(createDormitoryRelation.source.id).toBe(adminUser.id)
    expect(createDormitoryRelation.target.actionType).toBe('CreateDormitory')
    
    const createDormitoryDetails = JSON.parse(createDormitoryRelation.target.details)
    expect(createDormitoryDetails.userId).toBe(adminUser.id)
    expect(createDormitoryDetails.interaction).toBe('CreateDormitory')
    expect(createDormitoryDetails.payload.name).toBe('Building D Room 401')
    
    // Verify ApplyScoreDeduction audit relation
    const scoreDeductionRelation = auditRelations.find(rel => 
      rel.target.actionType === 'ApplyScoreDeduction'
    )
    
    expect(scoreDeductionRelation).toBeDefined()
    expect(scoreDeductionRelation.source.id).toBe(adminUser.id)
    expect(scoreDeductionRelation.target.actionType).toBe('ApplyScoreDeduction')
    
    const scoreDeductionDetails = JSON.parse(scoreDeductionRelation.target.details)
    expect(scoreDeductionDetails.userId).toBe(adminUser.id)
    expect(scoreDeductionDetails.interaction).toBe('ApplyScoreDeduction')
    expect(scoreDeductionDetails.payload.deductionAmount).toBe(25)
    
    // Verify AssignUserToBed audit relation
    const assignBedRelation = auditRelations.find(rel => 
      rel.target.actionType === 'AssignUserToBed'
    )
    
    expect(assignBedRelation).toBeDefined()
    expect(assignBedRelation.source.id).toBe(adminUser.id)
    expect(assignBedRelation.target.actionType).toBe('AssignUserToBed')
    
    const assignBedDetails = JSON.parse(assignBedRelation.target.details)
    expect(assignBedDetails.userId).toBe(adminUser.id)
    expect(assignBedDetails.interaction).toBe('AssignUserToBed')
    expect(assignBedDetails.payload.userId).toBe(targetUser.id)
    
    // Test 5: Verify the computation handles non-UUID user contexts correctly
    // The AuditTrackingRelation computation is designed to skip creating relations
    // for non-UUID user contexts (like test scenarios), so we just verify 
    // that AuditLog entities are still created (parent computation works)
    // but relations are only created for real User entities with UUID format
    
    const initialCreateUserLogs = await system.storage.find('AuditLog',
      MatchExp.atom({ key: 'actionType', value: ['=', 'CreateUser'] }),
      undefined,
      ['id', 'actionType']
    )
    
    // Execute interaction with non-UUID user context (like test scenarios)
    const nonUuidResult = await controller.callInteraction('CreateUser', {
      user: { id: 'test-admin' }, // Non-UUID format
      payload: {
        username: 'testusernonuuid',
        email: 'testnon@example.com',
        password: 'password123',
        fullName: 'Test Non UUID User',
        role: 'student'  
      }
    })
    
    expect(nonUuidResult.error).toBeUndefined()
    
    // Verify AuditLog was created (parent AuditLog computation still works)
    const finalCreateUserLogs = await system.storage.find('AuditLog',
      MatchExp.atom({ key: 'actionType', value: ['=', 'CreateUser'] }),
      undefined,
      ['id', 'actionType', 'details']
    )
    
    expect(finalCreateUserLogs.length).toBeGreaterThan(initialCreateUserLogs.length)
    
    // The implementation correctly skips creating AuditTrackingRelations for non-UUID users
    // This is by design - only real User entities (with UUID ids) get tracked in audit relations
  })

  test('DormitoryLeadershipRelation StateMachine computation', async () => {
    /**
     * Test Plan for: DormitoryLeadershipRelation StateMachine computation
     * Dependencies: DormitoryLeadershipRelation, User, Dormitory, AssignDormitoryLeader interaction
     * Steps: 1) Create user and dormitory 2) Execute AssignDormitoryLeader interaction 3) Verify relation is created 4) Test that second leader assignment is rejected
     * Business Logic: StateMachine creates relation when user is active and dormitory has no current leader
     */
    
    // Create a user who will be the leader
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'leader1',
        email: 'leader1@example.com',
        password: 'password123',
        fullName: 'Leader One',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    // Create a dormitory
    const dormitoryResult = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' }, 
      payload: {
        name: 'Building C Room 301',
        bedCount: 4,
        building: 'C',
        floor: 3
      }
    })
    
    expect(dormitoryResult.error).toBeUndefined()
    
    // Get the created user and dormitory IDs
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username', 'isActive', 'role']
      }
    })
    
    const dormitories = await controller.callInteraction('ViewDormitoryList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'name']
      }
    })
    
    const userId = users.data[0].id
    const dormitoryId = dormitories.data[0].id
    
    // Execute AssignDormitoryLeader interaction to create relation
    const assignResult = await controller.callInteraction('AssignDormitoryLeader', {
      user: { id: 'admin' }, 
      payload: {
        userId: userId,
        dormitoryId: dormitoryId
      }
    })

    // Verify the interaction was successful
    expect(assignResult).toBeDefined()
    expect(assignResult.error).toBeUndefined()
    
    // Query created DormitoryLeadershipRelation using the relation instance name
    const { DormitoryLeadershipRelation } = await import('../backend')
    const leadershipRelations = await system.storage.find(DormitoryLeadershipRelation.name, 
      MatchExp.atom({ key: 'source.id', value: ['=', userId] }),
      undefined,
      [
        'id',
        'assignedAt',
        ['source', { attributeQuery: ['id', 'username'] }],
        ['target', { attributeQuery: ['id', 'name'] }]
      ]
    )

    expect(leadershipRelations).toHaveLength(1)
    
    const leadershipRelation = leadershipRelations[0]
    expect(leadershipRelation.assignedAt).toBeGreaterThan(0)
    expect(leadershipRelation.source.id).toBe(userId)
    expect(leadershipRelation.target.id).toBe(dormitoryId)
    expect(leadershipRelation.id).toBeDefined()

    // Test that a second leader assignment to the same dormitory is rejected
    // Create another user
    const secondUserResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'leader2',
        email: 'leader2@example.com',
        password: 'password123',
        fullName: 'Leader Two',
        role: 'student'
      }
    })
    
    expect(secondUserResult.error).toBeUndefined()
    
    // Get the second user ID
    const updatedUsers = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const secondUserId = (updatedUsers.data as any[]).find(u => u.username === 'leader2').id
    
    // Try to assign second leader to same dormitory - should fail
    const secondAssignResult = await controller.callInteraction('AssignDormitoryLeader', {
      user: { id: 'admin' }, 
      payload: {
        userId: secondUserId,
        dormitoryId: dormitoryId
      }
    })

    // This should succeed as an interaction but not create a relation due to StateMachine logic
    expect(secondAssignResult).toBeDefined()
    expect(secondAssignResult.error).toBeUndefined()
    
    // Verify that there's still only one leadership relation for the dormitory
    const finalLeadershipRelations = await system.storage.find(DormitoryLeadershipRelation.name, 
      MatchExp.atom({ key: 'target.id', value: ['=', dormitoryId] }),
      undefined,
      [
        'id',
        ['source', { attributeQuery: ['id', 'username'] }]
      ]
    )

    expect(finalLeadershipRelations).toHaveLength(1)
    expect(finalLeadershipRelations[0].source.username).toBe('leader1') // Original leader remains
  })

  test('UserScoringRelation creation with ScoreEvent (_parent:ScoreEvent)', async () => {
    /**
     * Test Plan for: UserScoringRelation Transform computation
     * Dependencies: UserScoringRelation, User entity, ScoreEvent entity, ApplyScoreDeduction interaction
     * Steps: 1) Create a user 2) Execute ApplyScoreDeduction interaction 3) Verify UserScoringRelation is created linking User to ScoreEvent
     * Business Logic: When ScoreEvent is created through ApplyScoreDeduction interaction, a relation is created between the affected user and the score event
     */
    
    // First create a user to apply score deduction to
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'scoreduser',
        email: 'scored@example.com',
        password: 'password123',
        fullName: 'Scored User',
        role: 'student'
      }
    })
    
    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const userId = users.data[0].id
    
    // Execute ApplyScoreDeduction interaction
    const deductionResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' }, 
      payload: {
        userId: userId,
        deductionAmount: 20,
        reason: 'Missed mandatory meeting',
        category: 'attendance'
      }
    })

    // Verify the interaction was successful
    expect(deductionResult).toBeDefined()
    expect(deductionResult.error).toBeUndefined()
    
    // Query created ScoreEvent to get its ID
    const scoreEvents = await system.storage.find('ScoreEvent', 
      undefined,
      { orderBy: { timestamp: 'desc' }, limit: 1 },
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents).toHaveLength(1)
    
    const scoreEvent = scoreEvents[0]
    expect(scoreEvent.amount).toBe(-20) // Negative for deduction
    expect(scoreEvent.reason).toBe('Missed mandatory meeting')
    expect(scoreEvent.category).toBe('attendance')
    
    // Query UserScoringRelation using the relation instance name
    const { UserScoringRelation } = await import('../backend')
    const scoringRelations = await system.storage.find(UserScoringRelation.name, 
      MatchExp.atom({ key: 'source.id', value: ['=', userId] })
        .and({ key: 'target.id', value: ['=', scoreEvent.id] }),
      undefined,
      [
        'id',
        'createdAt',
        ['source', { attributeQuery: ['id', 'username'] }],
        ['target', { attributeQuery: ['id', 'amount', 'reason'] }]
      ]
    )

    expect(scoringRelations).toHaveLength(1)
    
    const scoringRelation = scoringRelations[0]
    expect(scoringRelation.source.id).toBe(userId)
    expect(scoringRelation.source.username).toBe('scoreduser')
    expect(scoringRelation.target.id).toBe(scoreEvent.id)
    expect(scoringRelation.target.amount).toBe(-20)
    expect(scoringRelation.target.reason).toBe('Missed mandatory meeting')
    expect(scoringRelation.createdAt).toBeGreaterThan(0)
    expect(scoringRelation.id).toBeDefined()
  })

  test('RemovalRequestingRelation creation with RemovalRequest (_parent:RemovalRequest)', async () => {
    /**
     * Test Plan for: RemovalRequestingRelation Transform computation
     * Dependencies: RemovalRequestingRelation, User entity, RemovalRequest entity, CreateRemovalRequest interaction
     * Steps: 1) Create a requester user and target user 2) Execute CreateRemovalRequest interaction 3) Verify RemovalRequestingRelations are created linking both users to RemovalRequest
     * Business Logic: When RemovalRequest is created through CreateRemovalRequest interaction, relations are created between both the requesting user and target user with the removal request
     */
    
    // First create a user who will be the requester
    const requesterResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'requester',
        email: 'requester@example.com',
        password: 'password123',
        fullName: 'Requester User',
        role: 'admin'
      }
    })
    
    expect(requesterResult.error).toBeUndefined()
    
    // Create a user who will be the target of removal request
    const targetResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' }, 
      payload: {
        username: 'target',
        email: 'target@example.com',
        password: 'password123',
        fullName: 'Target User',
        role: 'student'
      }
    })
    
    expect(targetResult.error).toBeUndefined()
    
    // Get the created user IDs
    const users = await controller.callInteraction('ViewUserList', {
      user: { id: 'admin' },
      query: {
        attributeQuery: ['id', 'username']
      }
    })
    
    const requesterUser = (users.data as any[]).find(u => u.username === 'requester')
    const targetUser = (users.data as any[]).find(u => u.username === 'target')
    
    expect(requesterUser).toBeDefined()
    expect(targetUser).toBeDefined()
    
    // Execute CreateRemovalRequest interaction with the requester as the user context
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: requesterUser.id }, 
      payload: {
        targetUserId: targetUser.id,
        reason: 'Serious policy violations',
        urgency: 'high'
      }
    })

    // Verify the interaction was successful
    expect(requestResult).toBeDefined()
    expect(requestResult.error).toBeUndefined()
    
    // Query created RemovalRequest to get its ID
    const removalRequests = await system.storage.find('RemovalRequest', 
      undefined,
      { orderBy: { createdAt: 'desc' }, limit: 1 },
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(removalRequests).toHaveLength(1)
    
    const removalRequest = removalRequests[0]
    expect(removalRequest.reason).toBe('Serious policy violations')
    expect(removalRequest.urgency).toBe('high')
    expect(removalRequest.status).toBe('pending')
    
    // Query RemovalRequestingRelation using the relation instance name
    const { RemovalRequestingRelation } = await import('../backend')
    const requestingRelations = await system.storage.find(RemovalRequestingRelation.name, 
      MatchExp.atom({ key: 'target.id', value: ['=', removalRequest.id] }),
      undefined,
      [
        'id',
        'role',
        'createdAt',
        ['source', { attributeQuery: ['id', 'username'] }],
        ['target', { attributeQuery: ['id', 'reason', 'urgency'] }]
      ]
    )

    expect(requestingRelations).toHaveLength(2) // One for requester, one for target
    
    // Find the requester relation
    const requesterRelation = requestingRelations.find(rel => 
      rel.source.id === requesterUser.id && rel.role === 'requester'
    )
    
    expect(requesterRelation).toBeDefined()
    expect(requesterRelation.source.id).toBe(requesterUser.id)
    expect(requesterRelation.source.username).toBe('requester')
    expect(requesterRelation.target.id).toBe(removalRequest.id)
    expect(requesterRelation.target.reason).toBe('Serious policy violations')
    expect(requesterRelation.target.urgency).toBe('high')
    expect(requesterRelation.role).toBe('requester')
    expect(requesterRelation.createdAt).toBeGreaterThan(0)
    expect(requesterRelation.id).toBeDefined()
    
    // Find the target relation
    const targetRelation = requestingRelations.find(rel => 
      rel.source.id === targetUser.id && rel.role === 'target'
    )
    
    expect(targetRelation).toBeDefined()
    expect(targetRelation.source.id).toBe(targetUser.id)
    expect(targetRelation.source.username).toBe('target')
    expect(targetRelation.target.id).toBe(removalRequest.id)
    expect(targetRelation.target.reason).toBe('Serious policy violations')
    expect(targetRelation.target.urgency).toBe('high')
    expect(targetRelation.role).toBe('target')
    expect(targetRelation.createdAt).toBeGreaterThan(0)
    expect(targetRelation.id).toBeDefined()
  })

  test('User.id has correct auto-generated value (_owner)', async () => {
    /**
     * Test Plan for: User.id (_owner)
     * This tests that User.id is properly auto-generated when User is created
     * Steps: 1) Create a User via CreateUser interaction 2) Verify id is auto-generated and set
     * Business Logic: _owner properties are controlled by entity creation - id is auto-generated by the framework
     */
    
    // Execute CreateUser interaction
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'idtestuser',
        email: 'idtest@example.com', 
        password: 'password123',
        fullName: 'ID Test User',
        role: 'student'
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created user to verify id is properly set
    const user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'username', value: ['=', 'idtestuser'] }),
      undefined,
      ['id', 'username', 'email']
    )
    
    expect(user).toBeDefined()
    expect(user.id).toBeDefined()
    expect(typeof user.id).toBe('string')
    expect(user.id.length).toBeGreaterThan(0)
    expect(user.username).toBe('idtestuser')
    expect(user.email).toBe('idtest@example.com')
  })

  test('User.username is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: User.username (_owner)
     * This tests that User.username is properly set from payload when User is created
     * Steps: 1) Create a User via CreateUser interaction 2) Verify username is set from payload
     * Business Logic: _owner properties are controlled by entity creation - username is set from interaction payload
     */
    
    // Execute CreateUser interaction with specific username
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'uniqueusername123',
        email: 'unique@example.com', 
        password: 'password123',
        fullName: 'Unique Username User',
        role: 'student'
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created user to verify username is properly set from payload
    const user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'username', value: ['=', 'uniqueusername123'] }),
      undefined,
      ['id', 'username', 'email', 'fullName']
    )
    
    expect(user).toBeDefined()
    expect(user.username).toBe('uniqueusername123')
    expect(user.email).toBe('unique@example.com')
    expect(user.fullName).toBe('Unique Username User')
    expect(user.id).toBeDefined()
  })

  test('User.email is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: User.email (_owner)
     * This tests that User.email is properly set from payload when User is created
     * Steps: 1) Create a User via CreateUser interaction 2) Verify email is set from payload
     * Business Logic: _owner properties are controlled by entity creation - email is set from interaction payload
     */
    
    // Execute CreateUser interaction with specific email
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'emailtestuser',
        email: 'emailtest@domain.com', 
        password: 'password123',
        fullName: 'Email Test User',
        role: 'admin'
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created user to verify email is properly set from payload
    const user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'email', value: ['=', 'emailtest@domain.com'] }),
      undefined,
      ['id', 'username', 'email', 'fullName', 'role']
    )
    
    expect(user).toBeDefined()
    expect(user.email).toBe('emailtest@domain.com')
    expect(user.username).toBe('emailtestuser')
    expect(user.fullName).toBe('Email Test User')
    expect(user.role).toBe('admin')
    expect(user.id).toBeDefined()
  })

  test('User.fullName StateMachine computation handles CreateUser and UpdateUserProfile', async () => {
    /**
     * Test Plan for: User.fullName StateMachine computation
     * Dependencies: User entity, CreateUser interaction, UpdateUserProfile interaction
     * Steps: 1) Create a User via CreateUser interaction 2) Verify fullName is set 3) Update profile via UpdateUserProfile 4) Verify fullName is updated
     * Business Logic: StateMachine handles both creation (CreateUser) and updates (UpdateUserProfile) for fullName property
     */
    
    // Step 1: Execute CreateUser interaction
    const createResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'fullnametestuser',
        email: 'fullnametest@example.com', 
        password: 'password123',
        fullName: 'Original Full Name',
        role: 'student'
      }
    })

    // Verify the interaction was successful
    expect(createResult).toBeDefined()
    expect(createResult.error).toBeUndefined()
    
    // Step 2: Query the created user to verify fullName is properly set
    let user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'username', value: ['=', 'fullnametestuser'] }),
      undefined,
      ['id', 'username', 'fullName']
    )
    
    expect(user).toBeDefined()
    expect(user.fullName).toBe('Original Full Name')
    const userId = user.id
    
    // Step 3: Execute UpdateUserProfile interaction to update fullName
    const updateResult = await controller.callInteraction('UpdateUserProfile', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        fullName: 'Updated Full Name'
      }
    })

    // Verify the update interaction was successful
    expect(updateResult).toBeDefined()
    expect(updateResult.error).toBeUndefined()
    
    // Step 4: Query the user again to verify fullName was updated
    user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'id', value: ['=', userId] }),
      undefined,
      ['id', 'username', 'fullName']
    )
    
    expect(user).toBeDefined()
    expect(user.fullName).toBe('Updated Full Name')
    expect(user.username).toBe('fullnametestuser')
  })

  test('User.role StateMachine computation handles CreateUser and AssignDormitoryLeader', async () => {
    /**
     * Test Plan for: User.role StateMachine computation
     * Dependencies: User entity, Dormitory entity, CreateUser interaction, AssignDormitoryLeader interaction
     * Steps: 1) Create a User and Dormitory 2) Verify role is set from payload 3) Assign user as dormitory leader 4) Verify role is updated to 'dormitory_leader'
     * Business Logic: StateMachine handles both creation (CreateUser) and leadership assignment (AssignDormitoryLeader) for role property
     */
    
    // Step 1: Execute CreateUser interaction
    const createUserResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'roletestuser',
        email: 'roletest@example.com', 
        password: 'password123',
        fullName: 'Role Test User',
        role: 'student'
      }
    })

    // Verify the interaction was successful
    expect(createUserResult).toBeDefined()
    expect(createUserResult.error).toBeUndefined()
    
    // Create a dormitory for leadership assignment
    const createDormitoryResult = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'Leadership Test Dormitory',
        bedCount: 4,
        building: 'L',
        floor: 1
      }
    })
    
    expect(createDormitoryResult.error).toBeUndefined()
    
    // Step 2: Query the created user to verify role is properly set
    let user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'username', value: ['=', 'roletestuser'] }),
      undefined,
      ['id', 'username', 'role']
    )
    
    expect(user).toBeDefined()
    expect(user.role).toBe('student')
    const userId = user.id
    
    // Get dormitory ID
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'Leadership Test Dormitory'] }),
      undefined,
      ['id', 'name']
    )
    
    expect(dormitory).toBeDefined()
    const dormitoryId = dormitory.id
    
    // Step 3: Execute AssignDormitoryLeader interaction to update role
    const assignLeaderResult = await controller.callInteraction('AssignDormitoryLeader', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        dormitoryId: dormitoryId
      }
    })

    // Verify the assign leader interaction was successful
    expect(assignLeaderResult).toBeDefined()
    expect(assignLeaderResult.error).toBeUndefined()
    
    // Step 4: Query the user again to verify role was updated
    user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'id', value: ['=', userId] }),
      undefined,
      ['id', 'username', 'role']
    )
    
    expect(user).toBeDefined()
    expect(user.role).toBe('dormitory_leader')
    expect(user.username).toBe('roletestuser')
  })

  test('User.createdAt is set to timestamp at creation (_owner)', async () => {
    /**
     * Test Plan for: User.createdAt (_owner)
     * This tests that User.createdAt is properly set to current timestamp when User is created
     * Steps: 1) Create a User via CreateUser interaction 2) Verify createdAt is set to a reasonable timestamp
     * Business Logic: _owner properties are controlled by entity creation - createdAt is set to current timestamp
     */
    
    // Record time before creating user
    const beforeTime = Math.floor(Date.now() / 1000)
    
    // Execute CreateUser interaction
    const result = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'createdattestuser',
        email: 'createdat@example.com', 
        password: 'password123',
        fullName: 'Created At Test User',
        role: 'student'
      }
    })

    // Record time after creating user
    const afterTime = Math.floor(Date.now() / 1000)

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created user to verify createdAt is properly set
    const user = await system.storage.findOne('User',
      MatchExp.atom({ key: 'username', value: ['=', 'createdattestuser'] }),
      undefined,
      ['id', 'username', 'createdAt']
    )
    
    expect(user).toBeDefined()
    expect(user.createdAt).toBeDefined()
    expect(typeof user.createdAt).toBe('number')
    expect(user.createdAt).toBeGreaterThanOrEqual(beforeTime)
    expect(user.createdAt).toBeLessThanOrEqual(afterTime)
    expect(user.username).toBe('createdattestuser')
    expect(user.id).toBeDefined()
  })

  test('Dormitory.id has correct auto-generated value (_owner)', async () => {
    /**
     * Test Plan for: Dormitory.id (_owner)
     * This tests that Dormitory.id is properly auto-generated when Dormitory is created
     * Steps: 1) Create a Dormitory via CreateDormitory interaction 2) Verify id is auto-generated and set
     * Business Logic: _owner properties are controlled by entity creation - id is auto-generated by the framework
     */
    
    // Execute CreateDormitory interaction
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'ID Test Dormitory',
        bedCount: 6,
        building: 'T',
        floor: 2
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory to verify id is properly set
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'ID Test Dormitory'] }),
      undefined,
      ['id', 'name', 'bedCount', 'building', 'floor']
    )
    
    expect(dormitory).toBeDefined()
    expect(dormitory.id).toBeDefined()
    expect(typeof dormitory.id).toBe('string')
    expect(dormitory.id.length).toBeGreaterThan(0)
    expect(dormitory.name).toBe('ID Test Dormitory')
    expect(dormitory.bedCount).toBe(6)
    expect(dormitory.building).toBe('T')
    expect(dormitory.floor).toBe(2)
  })

  test('Dormitory.name is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: Dormitory.name (_owner)
     * This tests that Dormitory.name is properly set from payload when Dormitory is created
     * Steps: 1) Create a Dormitory via CreateDormitory interaction 2) Verify name is set from payload
     * Business Logic: _owner properties are controlled by entity creation - name is set from interaction payload
     */
    
    // Execute CreateDormitory interaction with specific name
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'Unique Dormitory Name 12345',
        bedCount: 8,
        building: 'N',
        floor: 3
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory to verify name is properly set from payload
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'Unique Dormitory Name 12345'] }),
      undefined,
      ['id', 'name', 'bedCount', 'building', 'floor']
    )
    
    expect(dormitory).toBeDefined()
    expect(dormitory.name).toBe('Unique Dormitory Name 12345')
    expect(dormitory.bedCount).toBe(8)
    expect(dormitory.building).toBe('N')
    expect(dormitory.floor).toBe(3)
    expect(dormitory.id).toBeDefined()
  })

  test('Dormitory.bedCount is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: Dormitory.bedCount (_owner)
     * This tests that Dormitory.bedCount is properly set from payload when Dormitory is created
     * Steps: 1) Create a Dormitory via CreateDormitory interaction 2) Verify bedCount is set from payload
     * Business Logic: _owner properties are controlled by entity creation - bedCount is set from interaction payload
     */
    
    // Execute CreateDormitory interaction with specific bedCount
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'Bed Count Test Dormitory',
        bedCount: 12,
        building: 'B',
        floor: 4
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory to verify bedCount is properly set from payload
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'Bed Count Test Dormitory'] }),
      undefined,
      ['id', 'name', 'bedCount', 'building', 'floor']
    )
    
    expect(dormitory).toBeDefined()
    expect(dormitory.bedCount).toBe(12)
    expect(dormitory.name).toBe('Bed Count Test Dormitory')
    expect(dormitory.building).toBe('B')
    expect(dormitory.floor).toBe(4)
    expect(dormitory.id).toBeDefined()
  })

  test('Dormitory.building is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: Dormitory.building (_owner)
     * This tests that Dormitory.building is properly set from payload when Dormitory is created
     * Steps: 1) Create a Dormitory via CreateDormitory interaction 2) Verify building is set from payload
     * Business Logic: _owner properties are controlled by entity creation - building is set from interaction payload
     */
    
    // Execute CreateDormitory interaction with specific building
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'Building Test Dormitory',
        bedCount: 6,
        building: 'WEST',
        floor: 5
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory to verify building is properly set from payload
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'Building Test Dormitory'] }),
      undefined,
      ['id', 'name', 'bedCount', 'building', 'floor']
    )
    
    expect(dormitory).toBeDefined()
    expect(dormitory.building).toBe('WEST')
    expect(dormitory.name).toBe('Building Test Dormitory')
    expect(dormitory.bedCount).toBe(6)
    expect(dormitory.floor).toBe(5)
    expect(dormitory.id).toBeDefined()
  })

  test('Dormitory.floor is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: Dormitory.floor (_owner)
     * This tests that Dormitory.floor is properly set from payload when Dormitory is created
     * Steps: 1) Create a Dormitory via CreateDormitory interaction 2) Verify floor is set from payload
     * Business Logic: _owner properties are controlled by entity creation - floor is set from interaction payload
     */
    
    // Execute CreateDormitory interaction with specific floor
    const result = await controller.callInteraction('CreateDormitory', {
      user: { id: 'admin' },
      payload: {
        name: 'Floor Test Dormitory',
        bedCount: 8,
        building: 'EAST',
        floor: 10
      }
    })

    // Verify the interaction was successful
    expect(result).toBeDefined()
    expect(result.error).toBeUndefined()
    
    // Query the created dormitory to verify floor is properly set from payload
    const dormitory = await system.storage.findOne('Dormitory',
      MatchExp.atom({ key: 'name', value: ['=', 'Floor Test Dormitory'] }),
      undefined,
      ['id', 'name', 'bedCount', 'building', 'floor']
    )
    
    expect(dormitory).toBeDefined()
    expect(dormitory.floor).toBe(10)
    expect(dormitory.name).toBe('Floor Test Dormitory')
    expect(dormitory.bedCount).toBe(8)
    expect(dormitory.building).toBe('EAST')
    expect(dormitory.id).toBeDefined()
  })

  test('ScoreEvent.amount is set from payload at creation (_owner)', async () => {
    /**
     * Test Plan for: ScoreEvent.amount (_owner)
     * Dependencies: ScoreEvent entity, User entity, ApplyScoreDeduction interaction
     * Steps: 1) Create user 2) Apply score deduction 3) Verify ScoreEvent amount is set from interaction payload
     * Business Logic: _owner properties are controlled by entity creation - amount is set from interaction payload (negative for deductions)
     */

    // First create a user
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'amounttestuser',
        email: 'amounttest@example.com',
        password: 'password123',
        fullName: 'Amount Test User',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'amounttestuser'] }),
      undefined,
      ['id', 'username']
    )
    const userId = users[0].id

    // Apply score deduction to create a ScoreEvent
    const scoreResult = await controller.callInteraction('ApplyScoreDeduction', {
      user: { id: 'admin' },
      payload: {
        userId: userId,
        deductionAmount: 30,
        reason: 'Testing amount property',
        category: 'test'
      }
    })

    expect(scoreResult.error).toBeUndefined()

    // Verify ScoreEvent was created with correct amount from payload
    const scoreEvents = await system.storage.find('ScoreEvent',
      MatchExp.atom({ key: 'reason', value: ['=', 'Testing amount property'] }),
      undefined,
      ['id', 'amount', 'reason', 'category', 'timestamp']
    )

    expect(scoreEvents.length).toBe(1)
    const scoreEvent = scoreEvents[0]
    
    // Verify amount is set correctly from payload (negative for deduction)
    expect(scoreEvent.amount).toBe(-30) // Negative for deduction as per Transform logic
    expect(scoreEvent.reason).toBe('Testing amount property')
    expect(scoreEvent.category).toBe('test')
    expect(scoreEvent.timestamp).toBeDefined()
    expect(typeof scoreEvent.timestamp).toBe('number')
    expect(scoreEvent.id).toBeDefined()
  })

  test('RemovalRequest.reason set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: RemovalRequest.reason (_owner)
     * This tests that reason is properly set when RemovalRequest is created
     * Dependencies: User entity, RemovalRequest entity, CreateRemovalRequest interaction
     * Steps: 1) Create target user 2) Create removal request with specific reason 3) Verify reason is set correctly
     * Business Logic: RemovalRequest's creation computation sets reason from interaction payload
     */

    // First create a user (needed as target for removal request)
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'reasonremovaltarget',
        email: 'reasonremoval@example.com',
        password: 'password123',
        fullName: 'Reason Removal Target',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID (this will be the target of removal request)
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'reasonremovaltarget'] }),
      undefined,
      ['id', 'username']
    )
    const targetUserId = users[0].id

    // Create removal request with a specific reason
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: 'admin' }, // Requester
      payload: {
        targetUserId: targetUserId,
        reason: 'Persistent disruptive behavior and policy violations',
        urgency: 'medium'
      }
    })

    expect(requestResult.error).toBeUndefined()

    // Find the created RemovalRequest
    const requests = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Persistent disruptive behavior and policy violations'] }),
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(requests.length).toBe(1)
    const removalRequest = requests[0]

    // Verify the reason is set correctly by the owner computation
    expect(removalRequest.reason).toBe('Persistent disruptive behavior and policy violations')
    expect(removalRequest.urgency).toBe('medium')
    expect(removalRequest.status).toBe('pending') // Default status
    expect(removalRequest.createdAt).toBeDefined()
    expect(typeof removalRequest.createdAt).toBe('number')
    expect(removalRequest.id).toBeDefined()
  })

  test('RemovalRequest.urgency set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: RemovalRequest.urgency (_owner)
     * This tests that urgency is properly set when RemovalRequest is created
     * Dependencies: User entity, RemovalRequest entity, CreateRemovalRequest interaction
     * Steps: 1) Create target user 2) Create removal request with specific urgency 3) Verify urgency is set correctly
     * Business Logic: RemovalRequest's creation computation sets urgency from interaction payload
     */

    // First create a user (needed as target for removal request)
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'urgencyremovaltarget',
        email: 'urgencyremoval@example.com',
        password: 'password123',
        fullName: 'Urgency Removal Target',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID (this will be the target of removal request)
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'urgencyremovaltarget'] }),
      undefined,
      ['id', 'username']
    )
    const targetUserId = users[0].id

    // Create removal request with a specific urgency
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: 'admin' }, // Requester
      payload: {
        targetUserId: targetUserId,
        reason: 'Safety concerns and immediate risk',
        urgency: 'high'
      }
    })

    expect(requestResult.error).toBeUndefined()

    // Find the created RemovalRequest
    const requests = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Safety concerns and immediate risk'] }),
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(requests.length).toBe(1)
    const removalRequest = requests[0]

    // Verify the urgency is set correctly by the owner computation
    expect(removalRequest.urgency).toBe('high')
    expect(removalRequest.reason).toBe('Safety concerns and immediate risk')
    expect(removalRequest.status).toBe('pending') // Default status
    expect(removalRequest.createdAt).toBeDefined()
    expect(typeof removalRequest.createdAt).toBe('number')
    expect(removalRequest.id).toBeDefined()
  })

  test('RemovalRequest.status transitions correctly via StateMachine', async () => {
    /**
     * Test Plan for: RemovalRequest.status (StateMachine type)
     * Dependencies: User entity, RemovalRequest entity, CreateRemovalRequest, ProcessRemovalRequest interactions
     * Steps: 1) Create users 2) Create removal request 3) Verify status is pending 4) Process request with approval 5) Verify status changes to approved 6) Create another request and reject it 7) Verify status changes to rejected
     * Business Logic: RemovalRequest status transitions from pending -> approved/rejected based on ProcessRemovalRequest decision
     */

    // First create users
    const userResult1 = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'targetuser',
        email: 'target@example.com',
        password: 'password123',
        fullName: 'Target User',
        role: 'student'
      }
    })

    const userResult2 = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'requesteruser',
        email: 'requester@example.com',
        password: 'password123',
        fullName: 'Requester User',
        role: 'dormitory_leader'
      }
    })

    expect(userResult1.error).toBeUndefined()
    expect(userResult2.error).toBeUndefined()
    
    // Get the created user IDs
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['in', ['targetuser', 'requesteruser']] }),
      undefined,
      ['id', 'username']
    )
    
    const targetUser = users.find(u => u.username === 'targetuser')
    const requesterUser = users.find(u => u.username === 'requesteruser')

    // Create removal request
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: requesterUser.id },
      payload: {
        targetUserId: targetUser.id,
        reason: 'Repeated violations',
        urgency: 'high'
      }
    })

    expect(requestResult.error).toBeUndefined()

    // Find the created RemovalRequest
    const removalRequests = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Repeated violations'] }),
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(removalRequests.length).toBe(1)
    const removalRequest = removalRequests[0]
    
    // Verify status is initially pending
    expect(removalRequest.status).toBe('pending')
    expect(removalRequest.reason).toBe('Repeated violations')
    expect(removalRequest.urgency).toBe('high')

    // Process the request with approval
    const approvalResult = await controller.callInteraction('ProcessRemovalRequest', {
      user: { id: 'admin' },
      payload: {
        requestId: removalRequest.id,
        decision: 'approved',
        notes: 'Valid reason for removal'
      }
    })

    expect(approvalResult.error).toBeUndefined()

    // Verify status changed to approved
    const approvedRequest = await system.storage.findOne('RemovalRequest',
      MatchExp.atom({ key: 'id', value: ['=', removalRequest.id] }),
      undefined,
      ['id', 'status', 'processedAt', 'notes']
    )

    expect(approvedRequest.status).toBe('approved')

    // Create another removal request to test rejection
    const userResult3 = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'anothertarget',
        email: 'another@example.com',
        password: 'password123',
        fullName: 'Another Target',
        role: 'student'
      }
    })

    expect(userResult3.error).toBeUndefined()

    const anotherUsers = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'anothertarget'] }),
      undefined,
      ['id', 'username']
    )
    const anotherTargetUser = anotherUsers[0]

    const requestResult2 = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: requesterUser.id },
      payload: {
        targetUserId: anotherTargetUser.id,
        reason: 'Minor issue',
        urgency: 'low'
      }
    })

    expect(requestResult2.error).toBeUndefined()

    // Find the second removal request
    const removalRequests2 = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Minor issue'] }),
      undefined,
      ['id', 'reason', 'status']
    )

    expect(removalRequests2.length).toBe(1)
    const removalRequest2 = removalRequests2[0]
    
    // Verify status is initially pending
    expect(removalRequest2.status).toBe('pending')

    // Process the request with rejection
    const rejectionResult = await controller.callInteraction('ProcessRemovalRequest', {
      user: { id: 'admin' },
      payload: {
        requestId: removalRequest2.id,
        decision: 'rejected',
        notes: 'Insufficient evidence'
      }
    })

    expect(rejectionResult.error).toBeUndefined()

    // Verify status changed to rejected
    const rejectedRequest = await system.storage.findOne('RemovalRequest',
      MatchExp.atom({ key: 'id', value: ['=', removalRequest2.id] }),
      undefined,
      ['id', 'status', 'processedAt', 'notes']
    )

    expect(rejectedRequest.status).toBe('rejected')
  })

  test('RemovalRequest.createdAt set by owner computation (_owner)', async () => {
    /**
     * Test Plan for: RemovalRequest.createdAt (_owner)
     * This tests that createdAt is properly set when RemovalRequest is created
     * Dependencies: User entity, RemovalRequest entity, CreateRemovalRequest interaction
     * Steps: 1) Create user 2) Create removal request 3) Verify createdAt is set by owner computation
     * Business Logic: RemovalRequest's creation computation sets createdAt timestamp
     */

    // First create a user (this will be the target of removal request)
    const userResult = await controller.callInteraction('CreateUser', {
      user: { id: 'admin' },
      payload: {
        username: 'createdattarget',
        email: 'createdat@example.com',
        password: 'password123',
        fullName: 'CreatedAt Target',
        role: 'student'
      }
    })

    expect(userResult.error).toBeUndefined()
    
    // Get the created user ID
    const users = await system.storage.find('User',
      MatchExp.atom({ key: 'username', value: ['=', 'createdattarget'] }),
      undefined,
      ['id', 'username']
    )
    const targetUserId = users[0].id

    // Record time before creating removal request
    const beforeTime = Math.floor(Date.now() / 1000)

    // Create removal request
    const requestResult = await controller.callInteraction('CreateRemovalRequest', {
      user: { id: 'admin' }, // Requester
      payload: {
        targetUserId: targetUserId,
        reason: 'Testing createdAt timestamp',
        urgency: 'medium'
      }
    })

    expect(requestResult.error).toBeUndefined()

    // Record time after creating removal request
    const afterTime = Math.floor(Date.now() / 1000)

    // Find the created RemovalRequest
    const requests = await system.storage.find('RemovalRequest',
      MatchExp.atom({ key: 'reason', value: ['=', 'Testing createdAt timestamp'] }),
      undefined,
      ['id', 'reason', 'urgency', 'status', 'createdAt']
    )

    expect(requests.length).toBe(1)
    const removalRequest = requests[0]

    // Verify the createdAt is set correctly by the owner computation
    expect(removalRequest.createdAt).toBeDefined()
    expect(typeof removalRequest.createdAt).toBe('number')
    
    // Verify timestamp is reasonable (within the time window)
    expect(removalRequest.createdAt).toBeGreaterThanOrEqual(beforeTime)
    expect(removalRequest.createdAt).toBeLessThanOrEqual(afterTime)
    
    // Verify other properties are also set correctly
    expect(removalRequest.reason).toBe('Testing createdAt timestamp')
    expect(removalRequest.urgency).toBe('medium')
    expect(removalRequest.status).toBe('pending')
    expect(removalRequest.id).toBeDefined()
  })
}) 