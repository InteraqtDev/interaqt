{
  "totalRules": 45,
  "phases": [
    {
      "phase": 1,
      "name": "Basic Role-Based Permissions",
      "description": "Simple role-based access control - checking user.role for basic permissions",
      "rules": [
        {
          "id": "P001",
          "interaction": "CreateUser",
          "type": "permission",
          "description": "Only admin can create users",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can create user",
            "Non-admin cannot create user"
          ],
          "completed": true
        },
        {
          "id": "P002", 
          "interaction": "CreateDormitory",
          "type": "permission",
          "description": "Only admin can create dormitories",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can create dormitory",
            "Non-admin cannot create dormitory"
          ],
          "completed": true
        },
        {
          "id": "P003",
          "interaction": "AssignDormitoryLeader",
          "type": "permission", 
          "description": "Only admin can assign leaders",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can assign leader",
            "Non-admin cannot assign leader"
          ],
          "completed": true
        },
        {
          "id": "P004",
          "interaction": "AssignUserToBed",
          "type": "permission",
          "description": "Only admin can assign users to beds",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can assign user to bed",
            "Non-admin cannot assign user to bed"
          ],
          "completed": true
        },
        {
          "id": "P005",
          "interaction": "ProcessRemovalRequest",
          "type": "permission",
          "description": "Only admin can process removal requests",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can process removal request",
            "Non-admin cannot process removal request"
          ],
          "completed": true
        },
        {
          "id": "P006",
          "interaction": "RemoveUserFromDormitory", 
          "type": "permission",
          "description": "Only admin can remove users from dormitories",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can remove user from dormitory",
            "Non-admin cannot remove user from dormitory"
          ],
          "completed": true
        },
        {
          "id": "P007",
          "interaction": "ViewUserList",
          "type": "permission",
          "description": "Only admin can view all users",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can view user list",
            "Non-admin cannot view user list"
          ],
          "completed": true
        },
        {
          "id": "P008",
          "interaction": "ViewAuditLog",
          "type": "permission",
          "description": "Only admin can view audit logs",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can view audit logs",
            "Non-admin cannot view audit logs"
          ],
          "completed": true
        },
        {
          "id": "P009",
          "interaction": "UpdateUserProfile",
          "type": "permission",
          "description": "Admin can update any user or users can update their own profile",
          "condition": "user.role === 'administrator' || payload.userId === user.id",
          "testScenarios": [
            "Admin can update any user profile",
            "User can update own profile", 
            "User cannot update other user's profile"
          ],
          "completed": false
        },
        {
          "id": "P010",
          "interaction": "UpdateSystemSettings",
          "type": "permission",
          "description": "Only admin can update system settings",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can update system settings",
            "Non-admin cannot update system settings"
          ],
          "completed": false
        },
        {
          "id": "P011", 
          "interaction": "UpdateScoreThresholds",
          "type": "permission",
          "description": "Only admin can update score thresholds",
          "condition": "user.role === 'administrator'",
          "testScenarios": [
            "Admin can update score thresholds",
            "Non-admin cannot update score thresholds"
          ],
          "completed": false
        }
      ]
    },
    {
      "phase": 2,
      "name": "Simple Payload Validations",
      "description": "Basic validation of payload data without complex queries",
      "rules": [
        {
          "id": "BR001",
          "interaction": "CreateDormitory",
          "type": "business_rule",
          "description": "Bed count must be between 4 and 6",
          "condition": "payload.bedCount >= 4 && payload.bedCount <= 6",
          "testScenarios": [
            "Can create with bed count 4",
            "Can create with bed count 6", 
            "Cannot create with bed count 3",
            "Cannot create with bed count 7"
          ],
          "completed": false
        },
        {
          "id": "BR002",
          "interaction": "CreateUser",
          "type": "business_rule",
          "description": "Role must be valid",
          "condition": "['administrator', 'dormitory_leader', 'regular_user'].includes(payload.role)",
          "testScenarios": [
            "Can create user with administrator role",
            "Can create user with dormitory_leader role",
            "Can create user with regular_user role",
            "Cannot create user with invalid_role"
          ],
          "completed": false
        },
        {
          "id": "BR003",
          "interaction": "CreateUser",
          "type": "business_rule", 
          "description": "Username must be provided and non-empty",
          "condition": "payload.username && payload.username.trim().length > 0",
          "testScenarios": [
            "Can create user with valid username",
            "Cannot create user with empty username",
            "Cannot create user with whitespace-only username"
          ],
          "completed": false
        },
        {
          "id": "BR004",
          "interaction": "CreateUser",
          "type": "business_rule",
          "description": "Email must be valid format",
          "condition": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(payload.email)",
          "testScenarios": [
            "Can create user with valid email",
            "Cannot create user with invalid email format",
            "Cannot create user without @ symbol"
          ],
          "completed": false
        },
        {
          "id": "BR005",
          "interaction": "CreateUser", 
          "type": "business_rule",
          "description": "Password must meet security requirements (min 8 chars)",
          "condition": "payload.password && payload.password.length >= 8",
          "testScenarios": [
            "Can create user with valid password",
            "Cannot create user with password less than 8 characters",
            "Cannot create user with empty password"
          ],
          "completed": false
        },
        {
          "id": "BR006",
          "interaction": "ApplyScoreDeduction",
          "type": "business_rule",
          "description": "Deduction amount must be positive",
          "condition": "payload.deductionAmount > 0",
          "testScenarios": [
            "Can deduct positive amount",
            "Cannot deduct zero amount",
            "Cannot deduct negative amount"
          ],
          "completed": false
        },
        {
          "id": "BR007",
          "interaction": "ApplyScoreDeduction",
          "type": "business_rule",
          "description": "Reason must be provided and non-empty",
          "condition": "payload.reason && payload.reason.trim().length > 0",
          "testScenarios": [
            "Can deduct with valid reason",
            "Cannot deduct with empty reason",
            "Cannot deduct with whitespace-only reason"
          ],
          "completed": false
        },
        {
          "id": "BR008",
          "interaction": "ApplyScoreDeduction",
          "type": "business_rule",
          "description": "Category must be from predefined list",
          "condition": "['noise', 'cleanliness', 'conduct', 'violation', 'other'].includes(payload.category)",
          "testScenarios": [
            "Can deduct with valid category",
            "Cannot deduct with invalid category"
          ],
          "completed": false
        },
        {
          "id": "BR009",
          "interaction": "CreateRemovalRequest",
          "type": "business_rule",
          "description": "Reason must be provided",
          "condition": "payload.reason && payload.reason.trim().length > 0",
          "testScenarios": [
            "Can create removal request with valid reason",
            "Cannot create removal request with empty reason"
          ],
          "completed": false
        },
        {
          "id": "BR010",
          "interaction": "CreateRemovalRequest",
          "type": "business_rule",
          "description": "Urgency must be valid level",
          "condition": "['low', 'medium', 'high'].includes(payload.urgency)",
          "testScenarios": [
            "Can create request with low urgency",
            "Can create request with medium urgency", 
            "Can create request with high urgency",
            "Cannot create request with invalid urgency"
          ],
          "completed": false
        },
        {
          "id": "BR011",
          "interaction": "ProcessRemovalRequest",
          "type": "business_rule",
          "description": "Decision must be approved or rejected",
          "condition": "['approved', 'rejected'].includes(payload.decision)",
          "testScenarios": [
            "Can process with approved decision",
            "Can process with rejected decision",
            "Cannot process with invalid decision"
          ],
          "completed": false
        }
      ]
    },
    {
      "phase": 3,
      "name": "Complex Dormitory Leader Permissions",
      "description": "Permission rules that require checking dormitory leadership relationships",
      "rules": [
        {
          "id": "P012",
          "interaction": "ApplyScoreDeduction",
          "type": "permission",
          "description": "Only dormitory leader can deduct scores from their residents",
          "condition": "user.role === 'dormitory_leader' and user is leader of dormitory containing target user",
          "dependencies": ["Need to query DormitoryLeadershipRelation and BedAssignmentRelation"],
          "testScenarios": [
            "Dormitory leader can deduct from own resident",
            "Dormitory leader cannot deduct from other dormitory resident",
            "Non-leader cannot deduct scores"
          ],
          "completed": false
        },
        {
          "id": "P013",
          "interaction": "CreateRemovalRequest",
          "type": "permission",
          "description": "Only dormitory leader can create removal requests for their residents",
          "condition": "user.role === 'dormitory_leader' and target user is in user's dormitory",
          "dependencies": ["Need to query DormitoryLeadershipRelation and BedAssignmentRelation"],
          "testScenarios": [
            "Dormitory leader can create removal request for own resident",
            "Dormitory leader cannot create removal request for other dormitory resident"
          ],
          "completed": false
        },
        {
          "id": "P014",
          "interaction": "ViewMyDormitoryUsers",
          "type": "permission",
          "description": "Only dormitory leader can view their dormitory users",
          "condition": "user.role === 'dormitory_leader' and user has assigned dormitory",
          "dependencies": ["Need to query DormitoryLeadershipRelation"],
          "testScenarios": [
            "Dormitory leader can view own dormitory users",
            "Non-leader cannot view dormitory users",
            "Leader without assignment cannot view dormitory users"
          ],
          "completed": false
        },
        {
          "id": "P015",
          "interaction": "ViewDormitoryList",
          "type": "permission",
          "description": "Dormitory leader can only view their assigned dormitory",
          "condition": "user.role === 'administrator' || (user.role === 'dormitory_leader' && filtering to own dormitory)",
          "dependencies": ["Need to query DormitoryLeadershipRelation"],
          "testScenarios": [
            "Admin can view all dormitories",
            "Dormitory leader can only view own dormitory",
            "Regular user cannot view dormitories"
          ],
          "completed": false
        }
      ]
    },
    {
      "phase": 4,
      "name": "Entity Existence and State Validations",
      "description": "Business rules that require checking entity existence and current state",
      "rules": [
        {
          "id": "BR012",
          "interaction": "CreateUser",
          "type": "business_rule",
          "description": "Username must be unique",
          "condition": "No existing user with same username",
          "dependencies": ["Need to query existing User entities"],
          "testScenarios": [
            "Can create user with unique username",
            "Cannot create user with duplicate username"
          ],
          "completed": false
        },
        {
          "id": "BR013",
          "interaction": "CreateUser",
          "type": "business_rule",
          "description": "Email must be unique",
          "condition": "No existing user with same email",
          "dependencies": ["Need to query existing User entities"],
          "testScenarios": [
            "Can create user with unique email",
            "Cannot create user with duplicate email"
          ],
          "completed": false
        },
        {
          "id": "BR014",
          "interaction": "CreateDormitory",
          "type": "business_rule",
          "description": "Dormitory name must be unique",
          "condition": "No existing dormitory with same name",
          "dependencies": ["Need to query existing Dormitory entities"],
          "testScenarios": [
            "Can create dormitory with unique name",
            "Cannot create dormitory with duplicate name"
          ],
          "completed": false
        },
        {
          "id": "BR015",
          "interaction": "AssignDormitoryLeader",
          "type": "business_rule",
          "description": "User must exist and be active",
          "condition": "Target user exists and isActive === true",
          "dependencies": ["Need to query User entity"],
          "testScenarios": [
            "Can assign active user as leader",
            "Cannot assign non-existent user as leader",
            "Cannot assign inactive user as leader"
          ],
          "completed": false
        },
        {
          "id": "BR016",
          "interaction": "AssignDormitoryLeader",
          "type": "business_rule",
          "description": "Dormitory cannot already have an assigned leader",
          "condition": "No existing DormitoryLeadershipRelation for target dormitory",
          "dependencies": ["Need to query DormitoryLeadershipRelation"],
          "testScenarios": [
            "Can assign leader to dormitory without leader",
            "Cannot assign leader to dormitory that already has leader"
          ],
          "completed": false
        },
        {
          "id": "BR017",
          "interaction": "AssignDormitoryLeader",
          "type": "business_rule",
          "description": "User cannot be currently assigned to a bed in any dormitory",
          "condition": "No existing BedAssignmentRelation for target user",
          "dependencies": ["Need to query BedAssignmentRelation"],
          "testScenarios": [
            "Can assign unassigned user as leader",
            "Cannot assign user who is already assigned to a bed"
          ],
          "completed": false
        },
        {
          "id": "BR018",
          "interaction": "AssignUserToBed",
          "type": "business_rule",
          "description": "User must exist and be active",
          "condition": "Target user exists and isActive === true",
          "dependencies": ["Need to query User entity"],
          "testScenarios": [
            "Can assign active user to bed",
            "Cannot assign non-existent user to bed",
            "Cannot assign inactive user to bed"
          ],
          "completed": false
        },
        {
          "id": "BR019",
          "interaction": "AssignUserToBed",
          "type": "business_rule",
          "description": "User must not already be assigned to any bed",
          "condition": "No existing BedAssignmentRelation for target user",
          "dependencies": ["Need to query BedAssignmentRelation"],
          "testScenarios": [
            "Can assign unassigned user to bed",
            "Cannot assign user who is already assigned to a bed"
          ],
          "completed": false
        },
        {
          "id": "BR020",
          "interaction": "AssignUserToBed",
          "type": "business_rule",
          "description": "Dormitory must exist",
          "condition": "Target dormitory exists",
          "dependencies": ["Need to query Dormitory entity"],
          "testScenarios": [
            "Can assign user to existing dormitory",
            "Cannot assign user to non-existent dormitory"
          ],
          "completed": false
        },
        {
          "id": "BR021",
          "interaction": "AssignUserToBed",
          "type": "business_rule",
          "description": "Bed must be available (dormitory has available beds)",
          "condition": "Target dormitory has availableBeds > 0",
          "dependencies": ["Need to check Dormitory.availableBeds computed property"],
          "testScenarios": [
            "Can assign user to dormitory with available beds",
            "Cannot assign user to dormitory with no available beds"
          ],
          "completed": false
        },
        {
          "id": "BR022",
          "interaction": "AssignUserToBed",
          "type": "business_rule",
          "description": "Bed number must be valid for the dormitory",
          "condition": "Bed number is between 1 and dormitory.bedCount",
          "dependencies": ["Need to query Dormitory entity"],
          "testScenarios": [
            "Can assign user to valid bed number",
            "Cannot assign user to bed number 0",
            "Cannot assign user to bed number greater than bedCount"
          ],
          "completed": false
        },
        {
          "id": "BR023",
          "interaction": "ProcessRemovalRequest",
          "type": "business_rule",
          "description": "Request must exist and be in pending status",
          "condition": "RemovalRequest exists and status === 'pending'",
          "dependencies": ["Need to query RemovalRequest entity"],
          "testScenarios": [
            "Can process pending removal request",
            "Cannot process non-existent removal request",
            "Cannot process already processed removal request"
          ],
          "completed": false
        },
        {
          "id": "BR024",
          "interaction": "ProcessRemovalRequest",
          "type": "business_rule",
          "description": "Notes are required for rejection",
          "condition": "If decision is 'rejected', notes must be provided",
          "dependencies": ["Conditional validation based on payload"],
          "testScenarios": [
            "Can approve request without notes",
            "Can reject request with notes",
            "Cannot reject request without notes"
          ],
          "completed": false
        },
        {
          "id": "BR025",
          "interaction": "RemoveUserFromDormitory",
          "type": "business_rule",
          "description": "User must have current bed assignment",
          "condition": "BedAssignmentRelation exists for target user",
          "dependencies": ["Need to query BedAssignmentRelation"],
          "testScenarios": [
            "Can remove user who is assigned to bed",
            "Cannot remove user who is not assigned to bed"
          ],
          "completed": false
        }
      ]
    },
    {
      "phase": 5,
      "name": "Complex Business Logic Validations",
      "description": "Advanced business rules requiring complex queries and calculations",
      "rules": [
        {
          "id": "BR026",
          "interaction": "CreateRemovalRequest",
          "type": "business_rule",
          "description": "Target user's score must be below removal threshold",
          "condition": "Target user's currentScore < system threshold (e.g., 50)",
          "dependencies": ["Need to query User.currentScore and system settings"],
          "testScenarios": [
            "Can create removal request for user below threshold",
            "Cannot create removal request for user above threshold"
          ],
          "completed": false
        },
        {
          "id": "BR027",
          "interaction": "CreateRemovalRequest",
          "type": "business_rule",
          "description": "No pending removal request for same user",
          "condition": "No existing RemovalRequest with status 'pending' for target user",
          "dependencies": ["Need to query RemovalRequest and RemovalRequestingRelation"],
          "testScenarios": [
            "Can create request for user without pending request",
            "Cannot create duplicate pending request for same user"
          ],
          "completed": false
        },
        {
          "id": "BR028",
          "interaction": "RemoveUserFromDormitory",
          "type": "business_rule",
          "description": "Must have approved removal request or administrative override",
          "condition": "Either admin override or approved RemovalRequest exists for user",
          "dependencies": ["Need to query RemovalRequest status"],
          "testScenarios": [
            "Admin can remove user without removal request (override)",
            "Can remove user with approved removal request",
            "Cannot remove user without approved request (non-admin)"
          ],
          "completed": false
        },
        {
          "id": "BR029",
          "interaction": "RemoveUserFromDormitory",
          "type": "business_rule",
          "description": "Effective date cannot be in the past",
          "condition": "If effective date is provided, it must be >= current date",
          "dependencies": ["Date validation"],
          "testScenarios": [
            "Can remove with future effective date",
            "Can remove without effective date (immediate)",
            "Cannot remove with past effective date"
          ],
          "completed": false
        }
      ]
    },
    {
      "phase": 6,
      "name": "System Self-Service Permissions",
      "description": "Permission rules for self-service operations",
      "rules": [
        {
          "id": "P016",
          "interaction": "ViewMyProfile",
          "type": "permission",
          "description": "Any authenticated user can view their own profile",
          "condition": "user is authenticated",
          "testScenarios": [
            "Authenticated admin can view own profile",
            "Authenticated dormitory leader can view own profile",
            "Authenticated regular user can view own profile",
            "Unauthenticated user cannot view profile"
          ],
          "completed": false
        }
      ]
    }
  ]
}