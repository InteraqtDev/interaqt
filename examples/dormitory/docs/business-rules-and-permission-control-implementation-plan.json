{
  "phases": [
    {
      "phase": 1,
      "name": "Basic Permissions - Admin Only",
      "description": "Simple role-based permissions for admin-only interactions",
      "rules": [
        {
          "id": "P001",
          "interaction": "CreateDormitory",
          "type": "permission",
          "description": "Only admin can create dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can create dormitory",
            "Student cannot create dormitory",
            "DormHead cannot create dormitory"
          ],
          "completed": true
        },
        {
          "id": "P002",
          "interaction": "UpdateDormitory",
          "type": "permission",
          "description": "Only admin can update dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can update dormitory",
            "Non-admin cannot update dormitory"
          ],
          "completed": true
        },
        {
          "id": "P003",
          "interaction": "DeactivateDormitory",
          "type": "permission",
          "description": "Only admin can deactivate dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can deactivate dormitory",
            "Non-admin cannot deactivate dormitory"
          ],
          "completed": true
        },
        {
          "id": "P004",
          "interaction": "CreateUser",
          "type": "permission",
          "description": "Only admin can create users",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can create user",
            "Non-admin cannot create user"
          ],
          "completed": true
        },
        {
          "id": "P005",
          "interaction": "AssignDormHead",
          "type": "permission",
          "description": "Only admin can assign dorm heads",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can assign dorm head",
            "Non-admin cannot assign dorm head"
          ],
          "completed": true
        },
        {
          "id": "P006",
          "interaction": "RemoveDormHead",
          "type": "permission",
          "description": "Only admin can remove dorm heads",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can remove dorm head",
            "Non-admin cannot remove dorm head"
          ],
          "completed": true
        },
        {
          "id": "P007",
          "interaction": "AssignUserToDormitory",
          "type": "permission",
          "description": "Only admin can assign users to dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can assign user to dormitory",
            "Non-admin cannot assign user to dormitory"
          ],
          "completed": true
        },
        {
          "id": "P008",
          "interaction": "RemoveUserFromDormitory",
          "type": "permission",
          "description": "Only admin can remove users from dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can remove user from dormitory",
            "Non-admin cannot remove user from dormitory"
          ],
          "completed": true
        },
        {
          "id": "P009",
          "interaction": "ProcessRemovalRequest",
          "type": "permission",
          "description": "Only admin can process removal requests",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can approve removal request",
            "Admin can reject removal request",
            "Non-admin cannot process removal request"
          ],
          "completed": true
        }
      ]
    },
    {
      "phase": 2,
      "name": "Simple Business Rules - Payload Validation",
      "description": "Business rules that only check payload values",
      "rules": [
        {
          "id": "BR001",
          "interaction": "CreateDormitory",
          "type": "business_rule",
          "description": "Dormitory capacity must be 4-6",
          "condition": "payload.capacity >= 4 && payload.capacity <= 6",
          "testScenarios": [
            "Can create with capacity 4",
            "Can create with capacity 6",
            "Cannot create with capacity 3",
            "Cannot create with capacity 7"
          ],
          "completed": true
        },
        {
          "id": "BR002",
          "interaction": "IssuePointDeduction",
          "type": "business_rule",
          "description": "Points must be between 1 and 10",
          "condition": "payload.points >= 1 && payload.points <= 10",
          "testScenarios": [
            "Can issue 1 point deduction",
            "Can issue 10 point deduction",
            "Cannot issue 0 point deduction",
            "Cannot issue 11 point deduction"
          ],
          "completed": true
        }
      ]
    },
    {
      "phase": 3,
      "name": "Complex Permissions - Role with Context",
      "description": "Permissions that require checking relationships",
      "rules": [
        {
          "id": "P010",
          "interaction": "IssuePointDeduction",
          "type": "permission",
          "description": "Admin or dorm head of user's dormitory can issue points",
          "condition": "user.role === 'admin' || (user.role === 'dormHead' && targetUser.dormitory === user.managedDormitory)",
          "dependencies": ["Need to query UserDormitoryRelation and DormitoryDormHeadRelation"],
          "testScenarios": [
            "Admin can issue points to any user",
            "DormHead can issue points to users in their dormitory",
            "DormHead cannot issue points to users in other dormitories",
            "Student cannot issue points"
          ],
          "completed": true
        },
        {
          "id": "P011",
          "interaction": "InitiateRemovalRequest",
          "type": "permission",
          "description": "Only dorm head of user's dormitory can initiate removal",
          "condition": "user.role === 'dormHead' && targetUser.dormitory === user.managedDormitory",
          "dependencies": ["Need to query UserDormitoryRelation and DormitoryDormHeadRelation"],
          "testScenarios": [
            "DormHead can initiate removal for users in their dormitory",
            "DormHead cannot initiate removal for users in other dormitories",
            "Admin cannot initiate removal requests",
            "Student cannot initiate removal requests"
          ],
          "completed": true
        },
        {
          "id": "P012",
          "interaction": "CancelRemovalRequest",
          "type": "permission",
          "description": "Only the initiating dorm head can cancel",
          "condition": "user is the original initiator of the request",
          "dependencies": ["Need to query RemovalRequestInitiatorRelation"],
          "testScenarios": [
            "Initiator can cancel their own request",
            "Other dorm heads cannot cancel the request",
            "Admin cannot cancel the request"
          ],
          "completed": true
        },
        {
          "id": "P013",
          "interaction": "UpdateUserProfile",
          "type": "permission",
          "description": "Admin or self can update profile",
          "condition": "user.role === 'admin' || payload.userId === user.id",
          "testScenarios": [
            "Admin can update any user profile",
            "User can update own profile",
            "User cannot update other's profile"
          ],
          "completed": true
        }
      ]
    },
    {
      "phase": 4,
      "name": "Complex Business Rules - Database Queries",
      "description": "Business rules requiring database state checks",
      "rules": [
        {
          "id": "BR003",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "User cannot already be assigned to a dormitory",
          "condition": "User must not have existing UserDormitoryRelation",
          "dependencies": ["Query UserDormitoryRelation"],
          "testScenarios": [
            "Can assign unassigned user",
            "Cannot assign already assigned user"
          ],
          "completed": true
        },
        {
          "id": "BR004",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "Dormitory must have available capacity",
          "condition": "dormitory.occupancy < dormitory.capacity",
          "dependencies": ["Query Dormitory entity"],
          "testScenarios": [
            "Can assign to dormitory with space",
            "Cannot assign to full dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR005",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "Dormitory must be active",
          "condition": "dormitory.status === 'active'",
          "dependencies": ["Query Dormitory entity"],
          "testScenarios": [
            "Can assign to active dormitory",
            "Cannot assign to inactive dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR006",
          "interaction": "AssignDormHead",
          "type": "business_rule",
          "description": "Dormitory can only have one dorm head",
          "condition": "No existing DormitoryDormHeadRelation for dormitory",
          "dependencies": ["Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "Can assign dorm head to dormitory without one",
            "Cannot assign second dorm head to same dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR007",
          "interaction": "AssignDormHead",
          "type": "business_rule",
          "description": "User cannot be dorm head of multiple dormitories",
          "condition": "User has no existing DormitoryDormHeadRelation",
          "dependencies": ["Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "Can assign user not already a dorm head",
            "Cannot assign user who is already dorm head elsewhere"
          ],
          "completed": true
        },
        {
          "id": "BR008",
          "interaction": "InitiateRemovalRequest",
          "type": "business_rule",
          "description": "Target user must have totalPoints >= 30",
          "condition": "targetUser.totalPoints >= 30",
          "dependencies": ["Query User entity and compute totalPoints"],
          "testScenarios": [
            "Can initiate removal for user with 30 points",
            "Can initiate removal for user with more than 30 points",
            "Cannot initiate removal for user with less than 30 points"
          ],
          "completed": true
        },
        {
          "id": "BR009",
          "interaction": "InitiateRemovalRequest",
          "type": "business_rule",
          "description": "Cannot have existing pending request for same user",
          "condition": "No pending RemovalRequest for target user",
          "dependencies": ["Query RemovalRequest and RemovalRequestTargetRelation"],
          "testScenarios": [
            "Can initiate removal when no pending request exists",
            "Cannot initiate removal when pending request exists",
            "Can initiate removal after previous request was processed"
          ],
          "completed": true
        },
        {
          "id": "BR010",
          "interaction": "ProcessRemovalRequest",
          "type": "business_rule",
          "description": "Request must be in pending status",
          "condition": "removalRequest.status === 'pending'",
          "dependencies": ["Query RemovalRequest entity"],
          "testScenarios": [
            "Can process pending request",
            "Cannot process already approved request",
            "Cannot process already rejected request",
            "Cannot process cancelled request"
          ],
          "completed": true
        },
        {
          "id": "BR011",
          "interaction": "CancelRemovalRequest",
          "type": "business_rule",
          "description": "Request must be in pending status",
          "condition": "removalRequest.status === 'pending'",
          "dependencies": ["Query RemovalRequest entity"],
          "testScenarios": [
            "Can cancel pending request",
            "Cannot cancel already processed request"
          ],
          "completed": true
        },
        {
          "id": "BR012",
          "interaction": "DeactivateDormitory",
          "type": "business_rule",
          "description": "Cannot deactivate if users are assigned",
          "condition": "dormitory.occupancy === 0",
          "dependencies": ["Query Dormitory entity"],
          "testScenarios": [
            "Can deactivate empty dormitory",
            "Cannot deactivate dormitory with users"
          ],
          "completed": true
        },
        {
          "id": "BR013",
          "interaction": "RemoveUserFromDormitory",
          "type": "business_rule",
          "description": "User must be assigned to a dormitory",
          "condition": "UserDormitoryRelation exists for user",
          "dependencies": ["Query UserDormitoryRelation"],
          "testScenarios": [
            "Can remove assigned user",
            "Cannot remove unassigned user"
          ],
          "completed": true
        }
      ]
    }
  ],
  "totalRules": 26,
  "totalPermissions": 13,
  "totalBusinessRules": 13
}
