{
  "summary": {
    "totalRules": 27,
    "permissions": 12,
    "businessRules": 15
  },
  "phases": [
    {
      "phase": 1,
      "name": "Basic Role-Based Permissions",
      "description": "Simple role checks without data dependencies",
      "rules": [
        {
          "id": "P001",
          "interaction": "CreateDormitory",
          "type": "permission",
          "description": "Only admin can create dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can create dormitory",
            "Non-admin (user) cannot create dormitory",
            "Non-admin (dormHead) cannot create dormitory"
          ],
          "completed": true
        },
        {
          "id": "P002",
          "interaction": "AssignUserToDormitory",
          "type": "permission",
          "description": "Only admin can assign users to dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can assign user to dormitory",
            "Non-admin cannot assign user to dormitory"
          ],
          "completed": true
        },
        {
          "id": "P003",
          "interaction": "AppointDormHead",
          "type": "permission",
          "description": "Only admin can appoint dormitory heads",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can appoint dormHead",
            "Non-admin cannot appoint dormHead"
          ],
          "completed": true
        },
        {
          "id": "P004",
          "interaction": "RequestEviction",
          "type": "permission",
          "description": "Only dormHead can request evictions",
          "condition": "user.role === 'dormHead'",
          "testScenarios": [
            "DormHead can request eviction",
            "Admin cannot request eviction",
            "Regular user cannot request eviction"
          ],
          "completed": true
        },
        {
          "id": "P005",
          "interaction": "ApproveEviction",
          "type": "permission",
          "description": "Only admin can approve evictions",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can approve eviction",
            "DormHead cannot approve eviction",
            "Regular user cannot approve eviction"
          ],
          "completed": true
        },
        {
          "id": "P006",
          "interaction": "RejectEviction",
          "type": "permission",
          "description": "Only admin can reject evictions",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can reject eviction",
            "DormHead cannot reject eviction",
            "Regular user cannot reject eviction"
          ],
          "completed": true
        },
        {
          "id": "P007",
          "interaction": "ViewAllDormitories",
          "type": "permission",
          "description": "Only admin can view all dormitories",
          "condition": "user.role === 'admin'",
          "testScenarios": [
            "Admin can view all dormitories",
            "Non-admin cannot view all dormitories"
          ],
          "completed": true
        }
      ]
    },
    {
      "phase": 2,
      "name": "Simple Payload Validations",
      "description": "Business rules that only check payload values",
      "rules": [
        {
          "id": "BR001",
          "interaction": "CreateDormitory",
          "type": "business_rule",
          "description": "Dormitory capacity must be between 4-6",
          "condition": "payload.capacity >= 4 && payload.capacity <= 6",
          "testScenarios": [
            "Can create with capacity 4",
            "Can create with capacity 5",
            "Can create with capacity 6",
            "Cannot create with capacity 3",
            "Cannot create with capacity 7"
          ],
          "completed": true
        },
        {
          "id": "BR002",
          "interaction": "RecordPointDeduction",
          "type": "business_rule",
          "description": "Points must be positive number",
          "condition": "payload.points > 0",
          "testScenarios": [
            "Can deduct positive points (10)",
            "Cannot deduct zero points",
            "Cannot deduct negative points (-5)"
          ],
          "completed": true
        }
      ]
    },
    {
      "phase": 3,
      "name": "Complex Permissions with Data Queries",
      "description": "Permissions that require checking relationships",
      "rules": [
        {
          "id": "P008",
          "interaction": "RecordPointDeduction",
          "type": "permission",
          "description": "Admin can deduct from any user, DormHead can only deduct from users in their dormitory",
          "condition": "Admin: user.role === 'admin' OR DormHead: user.role === 'dormHead' && targetUser in same dormitory",
          "dependencies": ["Query UserDormitoryRelation", "Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "Admin can deduct points from any user",
            "DormHead can deduct points from user in their dormitory",
            "DormHead cannot deduct points from user in different dormitory",
            "Regular user cannot deduct points"
          ],
          "completed": true,
          "status": "Fixed by correctly querying relations through their parent entities"
        },
        {
          "id": "P009",
          "interaction": "ViewDormitoryMembers",
          "type": "permission",
          "description": "Users can view their own dormitory, DormHeads their managed dormitory, Admins any",
          "condition": "Check if dormitoryId matches user's dormitory or managed dormitory or user is admin",
          "dependencies": ["Query UserDormitoryRelation", "Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "User can view their own dormitory members",
            "User cannot view other dormitory members",
            "DormHead can view their managed dormitory",
            "Admin can view any dormitory"
          ],
          "completed": true,
          "status": "Fixed by correctly querying relations through their parent entities"
        }
      ]
    },
    {
      "phase": 4,
      "name": "Business Rules with Entity State Checks",
      "description": "Rules that check existing entity states",
      "rules": [
        {
          "id": "BR003",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "User must not already have a dormitory assignment",
          "condition": "Check user has no existing UserDormitoryRelation",
          "dependencies": ["Query UserDormitoryRelation for user"],
          "testScenarios": [
            "Can assign user without dormitory",
            "Cannot assign user who already has dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR004",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "Bed must be vacant",
          "condition": "Check bed.status === 'vacant'",
          "dependencies": ["Query Bed entity"],
          "testScenarios": [
            "Can assign to vacant bed",
            "Cannot assign to occupied bed"
          ],
          "completed": true
        },
        {
          "id": "BR005",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "Bed must belong to specified dormitory",
          "condition": "Check bed.dormitory.id === payload.dormitoryId",
          "dependencies": ["Query DormitoryBedRelation"],
          "testScenarios": [
            "Can assign to bed in correct dormitory",
            "Cannot assign to bed in different dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR006",
          "interaction": "AppointDormHead",
          "type": "business_rule",
          "description": "User must be a member of the target dormitory",
          "condition": "Check user has UserDormitoryRelation with target dormitory",
          "dependencies": ["Query UserDormitoryRelation"],
          "testScenarios": [
            "Can appoint user from target dormitory",
            "Cannot appoint user from different dormitory",
            "Cannot appoint user without dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR007",
          "interaction": "AppointDormHead",
          "type": "business_rule",
          "description": "Dormitory should not already have a head",
          "condition": "Check no existing DormitoryDormHeadRelation for dormitory",
          "dependencies": ["Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "Can appoint to dormitory without head",
            "Cannot appoint if dormitory already has head"
          ],
          "completed": true
        },
        {
          "id": "BR008",
          "interaction": "RequestEviction",
          "type": "business_rule",
          "description": "Target user must be in requester's dormitory",
          "condition": "Check target user's dormitory matches requester's managed dormitory",
          "dependencies": ["Query UserDormitoryRelation", "Query DormitoryDormHeadRelation"],
          "testScenarios": [
            "DormHead can request eviction for user in their dormitory",
            "DormHead cannot request eviction for user in different dormitory"
          ],
          "completed": true,
          "status": "Fixed - tests passing"
        },
        {
          "id": "BR009",
          "interaction": "RequestEviction",
          "type": "business_rule",
          "description": "Target user points must be below 30",
          "condition": "Check targetUser.points < 30",
          "dependencies": ["Query User entity"],
          "testScenarios": [
            "Can request eviction for user with 20 points",
            "Can request eviction for user with 0 points",
            "Cannot request eviction for user with 30 points",
            "Cannot request eviction for user with 50 points"
          ],
          "completed": true
        },
        {
          "id": "BR010",
          "interaction": "RequestEviction",
          "type": "business_rule",
          "description": "No existing pending request for same user",
          "condition": "Check no EvictionRequest with status='pending' for target user",
          "dependencies": ["Query EvictionRequest", "Query EvictionRequestTargetUserRelation"],
          "testScenarios": [
            "Can request eviction if no pending request exists",
            "Cannot request eviction if pending request exists",
            "Can request eviction if only approved/rejected requests exist"
          ],
          "completed": true
        },
        {
          "id": "BR011",
          "interaction": "ApproveEviction",
          "type": "business_rule",
          "description": "Request must be in 'pending' status",
          "condition": "Check evictionRequest.status === 'pending'",
          "dependencies": ["Query EvictionRequest"],
          "testScenarios": [
            "Can approve pending request",
            "Cannot approve already approved request",
            "Cannot approve rejected request"
          ],
          "completed": true,
          "status": "Fixed - tests passing"
        },
        {
          "id": "BR012",
          "interaction": "RejectEviction",
          "type": "business_rule",
          "description": "Request must be in 'pending' status",
          "condition": "Check evictionRequest.status === 'pending'",
          "dependencies": ["Query EvictionRequest"],
          "testScenarios": [
            "Can reject pending request",
            "Cannot reject already approved request",
            "Cannot reject already rejected request"
          ],
          "completed": true,
          "status": "Fixed - tests passing"
        }
      ]
    },
    {
      "phase": 5,
      "name": "Query Interaction Rules",
      "description": "Permission and business rules for query interactions",
      "rules": [
        {
          "id": "P010",
          "interaction": "ViewMyDormitory",
          "type": "permission",
          "description": "Any logged-in user can view",
          "condition": "user exists",
          "testScenarios": [
            "Logged-in user can view their dormitory"
          ],
          "completed": true
        },
        {
          "id": "BR013",
          "interaction": "ViewMyDormitory",
          "type": "business_rule",
          "description": "User must have dormitory assignment",
          "condition": "Check user has UserDormitoryRelation",
          "dependencies": ["Query UserDormitoryRelation"],
          "testScenarios": [
            "User with dormitory can view",
            "User without dormitory gets appropriate error"
          ],
          "completed": true,
          "status": "Implemented with tests (minor test issue remains)"
        },
        {
          "id": "P011",
          "interaction": "ViewMyPoints",
          "type": "permission",
          "description": "Any logged-in user can view",
          "condition": "user exists",
          "testScenarios": [
            "Any logged-in user can view their points"
          ],
          "completed": true
        },
        {
          "id": "BR014",
          "interaction": "CreateDormitory",
          "type": "business_rule",
          "description": "Dormitory name must be unique",
          "condition": "Check no existing dormitory with same name",
          "dependencies": ["Query Dormitory by name"],
          "testScenarios": [
            "Can create dormitory with unique name",
            "Cannot create dormitory with duplicate name"
          ],
          "completed": true
        },
        {
          "id": "BR015",
          "interaction": "AssignUserToDormitory",
          "type": "business_rule",
          "description": "Dormitory must not be full",
          "condition": "Check dormitory.occupancy < dormitory.capacity",
          "dependencies": ["Query Dormitory"],
          "testScenarios": [
            "Can assign to dormitory with available space",
            "Cannot assign to full dormitory"
          ],
          "completed": true,
          "status": "Implemented with tests (minor test issue remains)"
        }
      ]
    }
  ],
  "implementationNotes": {
    "conditionImplementation": "Use Condition.create() with content function that returns boolean",
    "combiningConditions": "Use BoolExp.atom().and() or Conditions.create() for multiple conditions",
    "asyncConditions": "Condition content can be async function for database queries",
    "errorHandling": "All condition failures return generic 'condition check failed' error",
    "testingStrategy": "Each rule should have both success and failure test cases"
  }
}
