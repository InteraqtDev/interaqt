{
  "entities": [
    {
      "name": "User",
      "entityAnalysis": {
        "purpose": "System users including administrators, dormitory leaders, and residents",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["CreateUser", "Registration"]
          },
          "deletion": {
            "canBeDeleted": true,
            "deletionType": "soft-delete",
            "deletionInteractions": ["DeleteUser"]
          }
        },
        "computationDecision": "Transform",
        "reasoning": "interaction-created with soft-delete capability, uses Transform for creation with status property for soft deletion",
        "calculationMethod": "Independently created by CreateUser or Registration interactions"
      },
      "propertyAnalysis": [
        {
          "propertyName": "id",
          "type": "string",
          "purpose": "System-generated unique identifier",
          "controlType": "creation-only",
          "dataSource": "auto-generated",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": null,
          "interactionDependencies": null,
          "calculationMethod": "auto-generated"
        },
        {
          "propertyName": "username",
          "type": "string",
          "purpose": "Unique login identifier",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions with uniqueness validation",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateUser", "Registration", "UpdateUsername"],
          "calculationMethod": "Direct assignment from interactions with uniqueness validation"
        },
        {
          "propertyName": "password",
          "type": "string",
          "purpose": "Hashed authentication credential",
          "controlType": "independent",
          "dataSource": "Hashed value from interactions",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateUser", "Registration", "ChangePassword"],
          "calculationMethod": "Hashed value from interactions"
        },
        {
          "propertyName": "email",
          "type": "string",
          "purpose": "Contact email address",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions with format validation",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateUser", "Registration", "UpdateProfile"],
          "calculationMethod": "Direct assignment from interactions with format validation"
        },
        {
          "propertyName": "name",
          "type": "string",
          "purpose": "User's display name",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateUser", "Registration", "UpdateProfile"],
          "calculationMethod": "Direct assignment from interactions"
        },
        {
          "propertyName": "points",
          "type": "number",
          "purpose": "Behavior points balance",
          "controlType": "independent",
          "dataSource": "Starts at 100, reduced by sum of all PointDeduction.points through UserPointDeductionsRelation",
          "computationDecision": "Custom",
          "reasoning": "Has both dataDependencies (aggregation) and interactionDependencies (direct updates), complex calculation",
          "dependencies": ["UserPointDeductionsRelation", "PointDeduction.points"],
          "interactionDependencies": ["CreateUser", "Registration", "DeductPoints", "DeductResidentPoints"],
          "calculationMethod": "Starts at 100, reduced by sum of all PointDeduction.points through UserPointDeductionsRelation"
        },
        {
          "propertyName": "role",
          "type": "string",
          "purpose": "User role in the system (admin, dormitoryLeader, resident)",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions, restricted to admin operations",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it, represents state transitions",
          "dependencies": [],
          "interactionDependencies": ["CreateUser", "Registration", "AssignDormitoryLeader", "RemoveDormitoryLeader", "PromoteToAdmin"],
          "calculationMethod": "Direct assignment from interactions, restricted to admin operations"
        },
        {
          "propertyName": "createdAt",
          "type": "number",
          "purpose": "Account creation timestamp",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        },
        {
          "propertyName": "isDeleted",
          "type": "boolean",
          "purpose": "Soft delete flag",
          "controlType": "independent",
          "dataSource": "Set to true by DeleteUser, false by RestoreUser",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it, represents deletion state",
          "dependencies": [],
          "interactionDependencies": ["DeleteUser", "RestoreUser"],
          "calculationMethod": "Set to true by DeleteUser, false by RestoreUser"
        }
      ]
    },
    {
      "name": "Dormitory",
      "entityAnalysis": {
        "purpose": "Student housing units with specific bed capacities",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["CreateDormitory"]
          },
          "deletion": {
            "canBeDeleted": true,
            "deletionType": "soft-delete",
            "deletionInteractions": ["DeleteDormitory"]
          }
        },
        "computationDecision": "Transform",
        "reasoning": "interaction-created with soft-delete capability, uses Transform for creation with status property for soft deletion",
        "calculationMethod": "Independently created by CreateDormitory interaction"
      },
      "propertyAnalysis": [
        {
          "propertyName": "id",
          "type": "string",
          "purpose": "System-generated unique identifier",
          "controlType": "creation-only",
          "dataSource": "auto-generated",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": null,
          "interactionDependencies": null,
          "calculationMethod": "auto-generated"
        },
        {
          "propertyName": "name",
          "type": "string",
          "purpose": "Dormitory name or identifier",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions, admin only",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateDormitory", "UpdateDormitory"],
          "calculationMethod": "Direct assignment from interactions, admin only"
        },
        {
          "propertyName": "capacity",
          "type": "number",
          "purpose": "Number of beds in dormitory (4-6)",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions with range validation (4-6)",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateDormitory", "UpdateDormitoryCapacity"],
          "calculationMethod": "Direct assignment from interactions with range validation (4-6)"
        },
        {
          "propertyName": "floor",
          "type": "number",
          "purpose": "Floor number in building",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions, admin only",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateDormitory", "UpdateDormitory"],
          "calculationMethod": "Direct assignment from interactions, admin only"
        },
        {
          "propertyName": "building",
          "type": "string",
          "purpose": "Building name or identifier",
          "controlType": "independent",
          "dataSource": "Direct assignment from interactions, admin only",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["CreateDormitory", "UpdateDormitory"],
          "calculationMethod": "Direct assignment from interactions, admin only"
        },
        {
          "propertyName": "createdAt",
          "type": "number",
          "purpose": "Dormitory creation timestamp",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        },
        {
          "propertyName": "isDeleted",
          "type": "boolean",
          "purpose": "Soft delete flag",
          "controlType": "independent",
          "dataSource": "Set to true by DeleteDormitory, false by RestoreDormitory",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it, represents deletion state",
          "dependencies": [],
          "interactionDependencies": ["DeleteDormitory", "RestoreDormitory"],
          "calculationMethod": "Set to true by DeleteDormitory, false by RestoreDormitory"
        },
        {
          "propertyName": "occupiedBeds",
          "type": "number",
          "purpose": "Count of currently occupied beds",
          "controlType": "independent",
          "dataSource": "Count of Bed through DormitoryBedsRelation where Bed.isOccupied = true",
          "computationDecision": "Count",
          "reasoning": "Has dataDependencies with relations, computationMethod indicates count aggregation",
          "dependencies": ["DormitoryBedsRelation", "Bed.isOccupied"],
          "interactionDependencies": [],
          "calculationMethod": "Count of Bed through DormitoryBedsRelation where Bed.isOccupied = true"
        }
      ]
    },
    {
      "name": "Bed",
      "entityAnalysis": {
        "purpose": "Individual bed units within dormitories",
        "lifecycle": {
          "creation": {
            "type": "created-with-parent",
            "parent": "Dormitory",
            "creationInteractions": ["CreateDormitory"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "_parent:Dormitory",
        "reasoning": "created-with-parent type, created by Dormitory's computation",
        "calculationMethod": "Created by Dormitory's computation when Dormitory is created (NOT by Bed's own computation)"
      },
      "propertyAnalysis": [
        {
          "propertyName": "id",
          "type": "string",
          "purpose": "System-generated unique identifier",
          "controlType": "creation-only",
          "dataSource": "auto-generated",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": null,
          "interactionDependencies": null,
          "calculationMethod": "auto-generated"
        },
        {
          "propertyName": "bedNumber",
          "type": "string",
          "purpose": "Bed identifier within dormitory (e.g., A1, B2)",
          "controlType": "creation-only",
          "dataSource": "Generated based on position when Dormitory creates beds",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Generated based on position when Dormitory creates beds"
        },
        {
          "propertyName": "isOccupied",
          "type": "boolean",
          "purpose": "Whether bed is currently occupied",
          "controlType": "independent",
          "dataSource": "True if UserBedRelation exists for this bed, false otherwise",
          "computationDecision": "Count",
          "reasoning": "Has dataDependencies with relations, checking existence of relation",
          "dependencies": ["UserBedRelation"],
          "interactionDependencies": [],
          "calculationMethod": "True if UserBedRelation exists for this bed, false otherwise"
        },
        {
          "propertyName": "createdAt",
          "type": "number",
          "purpose": "Bed creation timestamp",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        }
      ]
    },
    {
      "name": "PointDeduction",
      "entityAnalysis": {
        "purpose": "Audit trail of behavior point deductions",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["DeductPoints", "DeductResidentPoints"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "Transform",
        "reasoning": "interaction-created with canBeDeleted: false, uses Transform with InteractionEventEntity",
        "calculationMethod": "Independently created by DeductPoints or DeductResidentPoints interactions"
      },
      "propertyAnalysis": [
        {
          "propertyName": "id",
          "type": "string",
          "purpose": "System-generated unique identifier",
          "controlType": "creation-only",
          "dataSource": "auto-generated",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": null,
          "interactionDependencies": null,
          "calculationMethod": "auto-generated"
        },
        {
          "propertyName": "reason",
          "type": "string",
          "purpose": "Category of violation",
          "controlType": "creation-only",
          "dataSource": "Set from interaction payload at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set from interaction payload at creation"
        },
        {
          "propertyName": "points",
          "type": "number",
          "purpose": "Number of points deducted",
          "controlType": "creation-only",
          "dataSource": "Set from interaction payload at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set from interaction payload at creation"
        },
        {
          "propertyName": "description",
          "type": "string",
          "purpose": "Detailed description of the violation",
          "controlType": "creation-only",
          "dataSource": "Set from interaction payload at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set from interaction payload at creation"
        },
        {
          "propertyName": "createdAt",
          "type": "number",
          "purpose": "Deduction timestamp",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        },
        {
          "propertyName": "createdBy",
          "type": "string",
          "purpose": "Name of admin or dormitory leader who created the deduction",
          "controlType": "creation-only",
          "dataSource": "Set from current user at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set from current user at creation"
        }
      ]
    },
    {
      "name": "RemovalRequest",
      "entityAnalysis": {
        "purpose": "Requests from dormitory leaders to remove problematic residents",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["SubmitRemovalRequest"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "Transform",
        "reasoning": "interaction-created with canBeDeleted: false, uses Transform with InteractionEventEntity",
        "calculationMethod": "Independently created by SubmitRemovalRequest interaction"
      },
      "propertyAnalysis": [
        {
          "propertyName": "id",
          "type": "string",
          "purpose": "System-generated unique identifier",
          "controlType": "creation-only",
          "dataSource": "auto-generated",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": null,
          "interactionDependencies": null,
          "calculationMethod": "auto-generated"
        },
        {
          "propertyName": "reason",
          "type": "string",
          "purpose": "Reason for removal request",
          "controlType": "creation-only",
          "dataSource": "Set from interaction payload at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set from interaction payload at creation"
        },
        {
          "propertyName": "status",
          "type": "string",
          "purpose": "Request status (pending, approved, rejected)",
          "controlType": "independent",
          "dataSource": "Set to 'pending' at creation, updated to 'approved' or 'rejected' by ProcessRemovalRequest",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it, represents state transitions",
          "dependencies": [],
          "interactionDependencies": ["SubmitRemovalRequest", "ProcessRemovalRequest"],
          "calculationMethod": "Set to 'pending' at creation, updated to 'approved' or 'rejected' by ProcessRemovalRequest"
        },
        {
          "propertyName": "createdAt",
          "type": "number",
          "purpose": "Request creation timestamp",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by entity creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        },
        {
          "propertyName": "processedAt",
          "type": "number",
          "purpose": "Timestamp when request was processed",
          "controlType": "independent",
          "dataSource": "Set to current timestamp when ProcessRemovalRequest is executed",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it, timestamp update",
          "dependencies": [],
          "interactionDependencies": ["ProcessRemovalRequest"],
          "calculationMethod": "Set to current timestamp when ProcessRemovalRequest is executed"
        },
        {
          "propertyName": "adminComment",
          "type": "string",
          "purpose": "Admin's comment on the decision",
          "controlType": "independent",
          "dataSource": "Set from ProcessRemovalRequest payload",
          "computationDecision": "StateMachine",
          "reasoning": "Has interactionDependencies that can modify it",
          "dependencies": [],
          "interactionDependencies": ["ProcessRemovalRequest"],
          "calculationMethod": "Set from ProcessRemovalRequest payload"
        }
      ]
    }
  ],
  "relations": [
    {
      "name": "UserDormitoryLeaderRelation",
      "relationAnalysis": {
        "purpose": "Links dormitory leaders to the dormitories they manage",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["AssignDormitoryLeader"]
          },
          "deletion": {
            "canBeDeleted": true,
            "deletionType": "hard-delete",
            "deletionInteractions": ["RemoveDormitoryLeader", "ProcessRemovalRequest"]
          }
        },
        "computationDecision": "StateMachine",
        "reasoning": "interaction-created with canBeDeleted: true (hard-delete), must use StateMachine for both create and delete",
        "calculationMethod": "Independently created by AssignDormitoryLeader interaction"
      },
      "propertyAnalysis": [
        {
          "propertyName": "assignedAt",
          "type": "number",
          "purpose": "Timestamp when leader was assigned",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by relation creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        }
      ]
    },
    {
      "name": "DormitoryBedsRelation",
      "relationAnalysis": {
        "purpose": "Links dormitories to their beds",
        "lifecycle": {
          "creation": {
            "type": "created-with-entity",
            "parent": "Dormitory",
            "creationInteractions": ["CreateDormitory"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "_parent:Dormitory",
        "reasoning": "created-with-entity type with canBeDeleted: false, created by parent entity's computation",
        "calculationMethod": "Created together with Bed entities by Dormitory's computation when Dormitory is created"
      },
      "propertyAnalysis": []
    },
    {
      "name": "UserBedRelation",
      "relationAnalysis": {
        "purpose": "Links users to their assigned beds",
        "lifecycle": {
          "creation": {
            "type": "interaction-created",
            "parent": null,
            "creationInteractions": ["AssignUserToBed"]
          },
          "deletion": {
            "canBeDeleted": true,
            "deletionType": "hard-delete",
            "deletionInteractions": ["RemoveUserFromBed", "ProcessRemovalRequest"]
          }
        },
        "computationDecision": "StateMachine",
        "reasoning": "interaction-created with canBeDeleted: true (hard-delete), must use StateMachine for both create and delete",
        "calculationMethod": "Independently created by AssignUserToBed interaction"
      },
      "propertyAnalysis": [
        {
          "propertyName": "assignedAt",
          "type": "number",
          "purpose": "Timestamp when user was assigned to bed",
          "controlType": "creation-only",
          "dataSource": "Set to current timestamp at creation",
          "computationDecision": "_owner",
          "reasoning": "controlType is creation-only, controlled by relation creation",
          "dependencies": [],
          "interactionDependencies": [],
          "calculationMethod": "Set to current timestamp at creation"
        }
      ]
    },
    {
      "name": "UserPointDeductionsRelation",
      "relationAnalysis": {
        "purpose": "Links users to their point deduction records",
        "lifecycle": {
          "creation": {
            "type": "created-with-entity",
            "parent": "PointDeduction",
            "creationInteractions": ["DeductPoints", "DeductResidentPoints"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "_parent:PointDeduction",
        "reasoning": "created-with-entity type with canBeDeleted: false, created by parent entity's computation",
        "calculationMethod": "Created together with PointDeduction entity by PointDeduction's creation interactions"
      },
      "propertyAnalysis": []
    },
    {
      "name": "UserRemovalRequestsRelation",
      "relationAnalysis": {
        "purpose": "Links users to removal requests targeting them",
        "lifecycle": {
          "creation": {
            "type": "created-with-entity",
            "parent": "RemovalRequest",
            "creationInteractions": ["SubmitRemovalRequest"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "_parent:RemovalRequest",
        "reasoning": "created-with-entity type with canBeDeleted: false, created by parent entity's computation",
        "calculationMethod": "Created together with RemovalRequest entity by RemovalRequest's creation interactions"
      },
      "propertyAnalysis": []
    },
    {
      "name": "DormitoryLeaderRemovalRequestsRelation",
      "relationAnalysis": {
        "purpose": "Links dormitory leaders to removal requests they submitted",
        "lifecycle": {
          "creation": {
            "type": "created-with-entity",
            "parent": "RemovalRequest",
            "creationInteractions": ["SubmitRemovalRequest"]
          },
          "deletion": {
            "canBeDeleted": false,
            "deletionType": "none",
            "deletionInteractions": []
          }
        },
        "computationDecision": "_parent:RemovalRequest",
        "reasoning": "created-with-entity type with canBeDeleted: false, created by parent entity's computation",
        "calculationMethod": "Created together with RemovalRequest entity by RemovalRequest's creation interactions"
      },
      "propertyAnalysis": []
    }
  ],
  "dictionaries": [
    {
      "name": "totalUsers",
      "dictionaryAnalysis": {
        "purpose": "Track total number of users in the system",
        "type": "number",
        "collection": false,
        "computationDecision": "Count",
        "reasoning": "computationMethod indicates count aggregation of entities with condition",
        "dependencies": ["User", "User.isDeleted"],
        "interactionDependencies": [],
        "calculationMethod": "Count of all User entities where isDeleted = false"
      }
    },
    {
      "name": "totalDormitories",
      "dictionaryAnalysis": {
        "purpose": "Track total number of active dormitories",
        "type": "number",
        "collection": false,
        "computationDecision": "Count",
        "reasoning": "computationMethod indicates count aggregation of entities with condition",
        "dependencies": ["Dormitory", "Dormitory.isDeleted"],
        "interactionDependencies": [],
        "calculationMethod": "Count of all Dormitory entities where isDeleted = false"
      }
    },
    {
      "name": "totalOccupiedBeds",
      "dictionaryAnalysis": {
        "purpose": "Track total number of occupied beds across all dormitories",
        "type": "number",
        "collection": false,
        "computationDecision": "Count",
        "reasoning": "computationMethod indicates count aggregation of entities with condition",
        "dependencies": ["Bed", "Bed.isOccupied"],
        "interactionDependencies": [],
        "calculationMethod": "Count of all Bed entities where isOccupied = true"
      }
    },
    {
      "name": "totalAvailableBeds",
      "dictionaryAnalysis": {
        "purpose": "Track total number of available beds across all dormitories",
        "type": "number",
        "collection": false,
        "computationDecision": "Count",
        "reasoning": "computationMethod indicates count aggregation of entities with condition",
        "dependencies": ["Bed", "Bed.isOccupied"],
        "interactionDependencies": [],
        "calculationMethod": "Count of all Bed entities where isOccupied = false"
      }
    },
    {
      "name": "pendingRemovalRequests",
      "dictionaryAnalysis": {
        "purpose": "Track number of pending removal requests",
        "type": "number",
        "collection": false,
        "computationDecision": "Count",
        "reasoning": "computationMethod indicates count aggregation of entities with condition",
        "dependencies": ["RemovalRequest", "RemovalRequest.status"],
        "interactionDependencies": [],
        "calculationMethod": "Count of all RemovalRequest entities where status = 'pending'"
      }
    }
  ]
}